embed
{{ hol
open bitstringTheory;
open wordsTheory;
}}

%%%%%%%%%%%%%%%%%%%
% Primitive types %
%%%%%%%%%%%%%%%%%%%

%x denotes variable name, f denotes field name or function name, tbl denotes table name
metavar x, f, tbl ::=
      {{ lex alphanum }}
      {{ hol string }}
      {{ tex [[x]] }}
      {{ com string }}

%TODO Numeral or alphanum?
metavar b ::=
      {{ lex numeral }}
      {{ hol bool }}
      {{ tex [[b]] }}
      {{ com boolean }}

metavar bl ::=
      {{ lex numeral }}
      {{ hol bool list }}
      {{ tex [[bl]] }}
      {{ com bit-string }}


%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Auxiliary metavariables %
%%%%%%%%%%%%%%%%%%%%%%%%%%%

metavar i ::=
      {{ lex numeral }}
      {{ hol num }}
      {{ tex [[i]] }}
      {{ com natural number }}

indexvar m, n, o ::=
  {{ lex numeral }}
  {{ coq nat }}
  {{ hol num }}
  {{ com indices }}


grammar

%%%%%%%%%%%%%%%%%%%%
% Auxiliary syntax %
%%%%%%%%%%%%%%%%%%%%

%This just exists in order to be able to use the below productions in the semantics
num_exp :: num_exp ::=
{{ hol num }}
{{ com expressions with numerals }}
| i :: M :: num
  {{ hol [[i]] }}
| num_exp + 1 :: M :: add1
  {{ hol ([[num_exp]] + 1) }}


%%%%%%%%%%%%%%%%
% Value syntax %
%%%%%%%%%%%%%%%%

boolv :: boolv_ ::=
{{ hol bool }}
{{ com boolean }}
| true :: M :: true
  {{ hol T }}
  {{ tex { \top } }}
| false :: M :: false
  {{ hol F }}
  {{ tex { \bot } }}
| b :: M :: free
  {{ hol [[b]] }}

bitv :: bitv_ ::=
{{ hol (bl # num) }}
{{ com bit-string }}
| bl n :: M :: bl
  {{ hol ([[bl]], [[n]]) }}

%Fence so that ott does not put packet_in before boolv
embed
{{ hol

}}
grammar

packet_in :: packet_in_ ::=
{{ hol (boolv list) }}
{{ com input packet }}
| [ boolv1 , .. , boolvn ] :: M :: list
  {{ hol ([[boolv1 .. boolvn]]) }}

packet_out :: packet_out_ ::=
{{ hol (boolv list) }}
{{ com output packet }}
| [ boolv1 , .. , boolvn ] :: M :: list
  {{ hol ([[boolv1 .. boolvn]]) }}

ipv4_checksum :: ipv4_checksum_ ::=
{{ hol (word16) }}
{{ com ipv4 header checksum }}

ext_obj :: ext_obj_ ::=
{{ com extern object }}
| packet_in :: :: in
  {{ com input packet }}
| packet_out :: :: out
  {{ com input packet }}
| ipv4_checksum :: :: ck
  {{ com ipv4 header checksum }}

v :: v_ ::=
{{ com value }}
| boolv :: :: bool
  {{ com boolean value }}
| bitv :: :: bit
  {{ com bit-string }}
| x :: :: str
  {{ com string literal }} 
| struct { x1 = v1 ; ... ; xn = vn } :: :: struct
  {{ com struct }}
| header boolv { x1 = v1 ; ... ; xn = vn } :: :: header
  {{ com header }}
| ext_obj :: :: ext
  {{ com extern object }}
| errmsg x :: :: err
  {{ com error message }}
| bot :: :: bot
  {{ com no value }}

v_list :: v_list_ ::=
{{ com list of values }}
{{ hol (v list) }}
| empty_vl :: M :: empty
  {{ com empty expression list }}
  {{ hol ([]:v list) }}
| v1 , .. , vn :: M :: vl
  {{ hol ([[v1 .. vn]]) }}

%An abstract function or extern method/function name
funn :: funn_ ::=
| f :: :: name
  {{ com function name }}
| inst f :: :: inst
  {{ com extern object instantiation }}
| f f' :: :: ext
  {{ com extern method call }}

%An abstract variable name
varn :: varn_ ::=
| x :: :: name
  {{ com variable name }}
| ( star , funn ) :: :: star 
  {{ com function return placeholder }}
| ext_ret :: :: ext_ret
  {{ com extern return variable }}

lval :: lval_ ::=
| varn :: :: varname
  {{ com variable name }}
| null :: :: null
  {{ com null variable }} 
| lval . f :: :: field
  {{ com field access }}
| ( lval ) :: X :: paren
  {{ hol ([[lval]]) }}


%%%%%%%%%%%%%%%%%%%
% Execution state %
%%%%%%%%%%%%%%%%%%%
%Note that this is not part of the P4 specification, but made up for verification purposes.

%Execution status: used to model function return and parser state transitions
status {{ tex t }}:: status_ ::=
{{ com execution status }}
| Running :: I :: running
  {{ tex { \mathbf{run} } }}
| Ret v :: I :: returnv
  {{ tex { \mathbf{ret} \; [[v]] } }}  
| Trans x :: I :: trans
  {{ com transition to parser state }}
  {{ tex { \mathbf{tra} \; [[x]] } }}

%This is the structure that maps variable names to values (and with copy-out variables)
scope {{ tex \gamma }} :: scope_ ::=
{{ hol (varn |-> (v # lval option)) }}
{{ com variable environment of current scope }}
| empty :: M :: empty
  {{ com empty scope }}
  {{ hol FEMPTY }}
  {{ tex {\gamma}_{\emptyset} }}
| ( scope ) :: S :: paren
  {{ hol ([[scope]]) }}
  {{ tex  [[scope]] }}

%A global scope is of the same type as a regular scope, but is used and typeset differently
g_scope {{ tex \gamma_{ \mathrm{G} } }} :: g_scope_ ::=
{{ com global scope }}
{{ hol scope }}
| scope :: M :: global
  {{ hol ([[scope]]) }}

mk {{ tex \mathit{mk} }} :: mk_ ::=
{{ com matching kinds }}
| exact :: :: exact
  {{ tex \mathrm{exact} }}
| ternary :: :: ternary
  {{ tex \mathrm{ternary} }}
| lpm :: :: lpm
  {{ tex \mathrm{lpm} }}

%Fence between mk and mkl
embed
{{ hol

}}
grammar

mkl {{ tex \mathit{mkl} }} :: mkl_ ::=
{{ com matching kinds list }}
{{ hol (mk list) }}
| empty :: :: empty
  {{ com empty match kind list }}
  {{ hol ([]:mk list) }}
| [ mk1 , .. , mkn ] :: M :: mks
  {{ com list of match kinds }}
  {{ hol ([[mk1 .. mkn]]) }}
| ( mkl ) :: S :: paren
  {{ hol ([[mkl]]) }}


%%%%%%%%%%%%%%%%%%%%%
% Expression syntax %
%%%%%%%%%%%%%%%%%%%%%

unop {{ tex \ominus }}:: unop_ ::=
| ! :: :: neg
  {{ com negation }}
  {{ tex ! }}
| ~ :: :: compl
  {{ com bitwise complement }}
  {{ tex \neg }}
| - :: :: neg_signed
  {{ com signed negation }}
| + :: :: un_plus
  {{ com unary plus }}

binop {{ tex \oplus }} :: binop_ ::=
| * :: :: mul
  {{ com multiplication }}
  {{ tex \times }}
| / :: :: div
  {{ com division }}
| mod :: :: mod
  %Denoted by % in P4 spec
  {{ com modulo }}
  {{ tex \bmod }}
| + :: :: add
  {{ com addition }}
| - :: :: sub
  {{ com subtraction }}
| SHL :: :: shl
  {{ com logical left-shift }}
  {{ tex \ll }}
| SHR :: :: shr
  {{ com logical right-shift }}
  {{ tex \gg }}
| LE :: :: le
  {{ com less or equal }}
  {{ tex \leq }}
| GE :: :: ge
  {{ com greater or equal }}
  {{ tex \geq }}
| < :: :: lt
  {{ com less }}
  {{ tex < }}
| > :: :: gt
  {{ com greater }}
  {{ tex > }}
| NE :: :: neq
  {{ com not equal }}
  {{ tex \neq }}
| EQ :: :: eq
  {{ com equal }}
  {{ tex = }}
| & :: :: and
  {{ com bitwise and }}
| ^ :: :: xor
  {{ com bitwise xor }}
  {{ tex \underline{\vee} }}
| '|' :: :: or
  {{ com bitwise or }}
  {{ tex \mid }}
| AND :: :: bin_and
  {{ com binary and }}
  {{ tex \land }}
| OR :: :: bin_or
  {{ com binary or }}
  {{ tex \lor }}

e :: e_ ::=
{{ com expression }}
| v :: :: v
  {{ com constant value }}
| var varn :: :: var
  {{ com variable }}
| { e1 , .. , en } :: :: list
  {{ com expression list }}
| e . x :: :: acc
  {{ com field access }}
| unop e :: :: unop
  {{ com unary operation }}
  {{ tex [[unop]] [[e]] }}
| e1 binop e2 :: :: binop
  {{ com binary operation }}
  {{ tex [[e1]] [[binop]] [[e2]] }}
| concat e1 e2 :: :: concat
  {{ com concatenation of bit-strings }}
| e1 [ e2 : e3 ] :: :: slice
  {{ com bit-slice }}
| call funn ( e1 , .. , en ) :: :: call
  {{ com function or extern call }}
| select e { v1 : x1 ; ... ; vn : xn } x :: :: select
  {{ com select }}
| eStruct { x1 = e1 ; ... ; xn = en } :: :: struct
  {{ com struct }}
| eHeader boolv { x1 = e1 ; ... ; xn = en } :: :: header
  {{ com header }}  
| ( e ) :: S :: paren
  {{ hol ([[e]]) }}

e_list :: e_list_ ::=
{{ com list of expressions }}
{{ hol (e list) }}
| empty_el :: M :: empty
  {{ com empty expression list }}
  {{ hol ([]:e list) }}
| e1 , .. , en :: M :: exps
  {{ com list of expressions }}
  {{ hol ([[e1 .. en]]) }}
| e '::' e_list :: M :: cons
  {{ com cons }}
  {{ hol ([[e]]::[[e_list]]) }}
| tl e_list :: M :: tail
  {{ com tail }}
  {{ hol (TL [[e_list]]) }}
| [ e1 , .. , en ] :: M :: list
  {{ com bracketed list of expressions }}
  {{ hol ([[e1 .. en]]) }}
| e_list ++ e_list' :: M :: append
  {{ com append two expression lists }}
  {{ hol ([[e_list]] ++ [[e_list']]) }}
| update ( e , i , e_list ) :: M :: update
  {{ com update entry of expression list }}
  {{ hol (LUPDATE [[e]] [[i]] [[e_list]]) }}
  {{ tex ([[i]] \mapsto  [[e]]) [[e_list]] }}
| ( e_list ) :: S :: paren
  {{ hol ([[e_list]]) }}


%%%%%%%%%%%%%%
% Statements %
%%%%%%%%%%%%%%

bt {{ tex \mathit{bt} }} :: bt_ ::=
{{ com base types }}
| bool_t :: :: bool
  {{ tex { \mathrm{bool}_{ \mathrm{t} } } }}
| bit_t :: :: bit
  {{ tex { \mathrm{bit}_{ \mathrm{t} } } }}

t {{ tex t }} :: t_ ::=
{{ com types }}
| bt :: :: base
| struct_t t1 , ... , tn :: :: struct
  {{ tex { \mathrm{struct}_{ \mathrm{t} }\,\, t_1 , \ldots , t_n } }}
| header_t t1 , ... , tn :: :: header
  {{ tex { \mathrm{header}_{ \mathrm{t} }\,\, t_1 , \ldots , t_n } }}
| ext_t :: :: ext
  {{ tex \mathrm{ext}_{ \mathrm{t} } }}

%Fence between mkl and ctrl
embed
{{ hol

}}
grammar

%The control plane configuration is part of the state, and used by the apply statement
ctrl {{ tex C }} :: ctrl_ ::=
{{ com control plane }}
{{ hol ((string # e_list # mkl) -> (string # e_list) option) }}

%The global scope list holds the global scope as well as the block-global scope
g_scope_list {{ tex \overline{\gamma_G} }} :: g_scope_list_ ::=
{{ hol (scope list) }}
{{ com list of the global scope and the block-global scope }}
| [ g_scope ]' :: M :: one
  {{ com only global scope }}
  {{ hol ([ [[g_scope]] ]) }}
  {{ tex [ [[g_scope]] ] }}
| [ g_scope ; g_scope' ] :: M :: two
  {{ com global scope and block-global scope }}
  {{ hol ([ [[g_scope]] ; [[g_scope']] ]) }}
  {{ tex [ [[g_scope]], [[g_scope']] ] }}
| take 1 g_scope_list :: M :: take
  {{ com take first element }}
  {{ hol (TAKE 1 [[g_scope_list]]) }}
  {{ tex \mathrm{take}(1,[[g_scope_list]]) }}

scopes_stack {{ tex \overline{\gamma} }} :: scopes_stack_ ::=
{{ hol (scope list) }}
{{ com stack of block scopes }}
| empty :: M :: empty
  {{ hol ([]:scope list) }}
  {{ tex {[\;]} }}
| [ scope1 , .. , scopen ] :: M :: list
  {{ hol ([[scope1 .. scopen]]) }}
| tl scopes_stack :: M :: tl
  {{ hol (TL [[scopes_stack]]) }}
  {{ tex \mathrm{tl} [[scopes_stack]] }}
| g_scope '::' scopes_stack' :: M :: cons
  {{ hol ([[g_scope]] :: [[scopes_stack']]) }}
  {{ tex [[g_scope]] :: [[scopes_stack']] }}
| scopes_stack ++ scopes_stack' :: M :: append
  {{ hol ([[scopes_stack]] ++ [[scopes_stack']]) }}
  {{ tex [[scopes_stack]] \mathrel{\mathop+}+ [[scopes_stack']] }}
| rev scopes_stack :: M :: rev
  {{ hol (REVERSE [[scopes_stack]]) }}
  {{ tex \mathrm{rev} ([[scopes_stack]]) }}
| update ( scope , i , scopes_stack ) :: M :: update_scope
  {{ com update a scope in the stack frame }}
  {{ hol ( LUPDATE [[scope]] [[i]] [[scopes_stack]] ) }}
  {{ tex ([[i]] \mapsto [[scope]]) [[scopes_stack]] }}
| g_scope_list :: M :: g_scope_list
  {{ com g_scope_list }}
  {{ hol ( [[g_scope_list]] ) }}
  {{ tex [[g_scope_list]] }}
| ( scopes_stack ) :: S :: paren
  {{ hol ([[scopes_stack]]) }}

%An extern function/method updates the scope stack, global scope list and ctrl directly.
%Note that at the time this happens, a new frame has already been declared for it to work inside. 
ext_fun {{ tex { \mathit{ext\_fun} } }} :: ext_fun_ ::=
{{ hol ((g_scope_list # scopes_stack # ctrl) -> ((g_scope_list # scopes_stack # ctrl) option)) }}

decl_list {{ tex { \overline{ \mathit{decl} } } }} :: decl_list_ ::=
{{ hol ((varn # t) list) }}
{{ com list of abstract variable name and type tuples to represent declarations }}

stmt :: stmt_ ::=
{{ com statement }}
| empty_stmt :: :: empty
  {{ com empty statement }}
  {{ tex \emptyset_{ \mathrm{stmt} } }}
| assign lval e :: :: ass
  {{ com assignment }}
  {{ tex [[lval]] \mathrel{\mathop:}= [[e]] }}
| if e then stmt1 else stmt2 :: :: cond
  {{ com conditional }}
| begin decl_list stmt end :: :: block
  {{ com block }}
  {{ tex \{ [[decl_list]] \, [[stmt]] \} }}
| return e :: :: ret
  {{ com return }}
| stmt1 ; stmt2 :: :: seq
  {{ com sequence }}
| verify e e' :: :: verify
  %e is the predicate, e' is the error message
  {{ com verify }}
| transition e :: :: trans
  {{ com transition }}
  {{ tex \mathbf{transition}\, [[e]] }}
| apply tbl ( e1 , .. , en ) :: :: app
  {{ com apply }}
 % {{ tex \mathbf{apply} \, [[tbl]] \, [[e_list]] }}
| ext :: :: ext
  {{ com extern function }}
  {{ tex \blacksquare  }}

%%%%%%%%%%%
% Context %
%%%%%%%%%%%

%Note that since the semantics is modular with respect to the architecture, A is typeset in cursive as a variable here
ascope {{ tex { {\gamma}_A } }}, ascope_ty :: ascope_ ::=
{{ com architectural scope }}
{{ hol ('a) }}

d {{ tex d }} :: d_ ::=
{{ com parameter direction }}
| 'in :: :: in
  {{ tex \downarrow }}
| out :: :: out
  {{ tex \uparrow }}
| inout :: :: inout
  {{ tex \updownarrow }}
| none :: :: none
  {{ tex \circ }}

%The "fixed function" of a fixed-function block
ff {{ tex { \mathit{ff} } }} :: ff_ ::=
{{ hol (ascope_ty -> ascope_ty option) }}

d_list :: d_list_ ::=
{{ com list of directions }}
{{ hol (d list) }}
| empty :: M :: empty
  {{ com empty direction list }}
  {{ hol ([]:d list) }}
| [ d1 , .. , dn ] :: M :: list
  {{ com list of directions }}
  {{ hol ([[d1 .. dn]]) }}
| d_list ++ d_list' :: M :: append
  {{ com append two e_lists }}
  {{ hol ([[d_list]] ++ [[d_list']]) }}
| ( d_list ) :: S :: paren
  {{ hol ([[d_list]]) }}

%Fence between stmt and func_map
embed
{{ hol

}}
grammar

func_map {{ tex F_g }} :: func_map_ ::=
{{ com function map for global functions and actions }}
{{ hol (string |-> (stmt # (string # d) list)) }}

b_func_map {{ tex F_b }} :: b_func_map_ ::=
{{ com function map for block-local actions }}
{{ hol (string |-> (stmt # (string # d) list)) }}

%This maps extern function names of an individual object obj to their implementations
%Note the stmt in order to accommodate return by using return statements
ext_fun_map {{ tex X_{ \mathrm{obj} } }} :: ext_fun_map_ ::=
{{ com extern function map }}
{{ hol (string |-> (stmt # (string # d) list # ext_fun)) }}

%Fence between ext_fun_map and ext_map
embed
{{ hol

}}
grammar

%This maps extern object names to tuples of optional constructors and the function map of the object in question
ext_map {{ tex X }} :: ext_map_ ::=
{{ com extern object map }}
{{ hol (string |-> (((stmt # (string # d) list # ext_fun) option) # ext_fun_map)) }}

tbl_map {{ tex { \mathit{Tb} } }} :: tbl_map_ ::=
{{ com table map }}
{{ hol (string |-> (mk list)) }}

pars_map {{ tex P }} :: pars_map_ ::=
{{ com parser state map }}
{{ hol (string |-> stmt) }}

in_out :: in_out_ ::=
{{ com input and output }}
{{ hol (bl # num) }}
| packet bl i :: M :: packet
  {{ hol ( [[bl]] , [[i]] ) }}

pbl_type :: pbl_type_ ::=
{{ com programmable block type }}
| parser :: :: parser
| control :: :: control

pblock {{ tex { \mathit{pblock} } }} :: pblock_ ::=
{{ com programmable block }}
| pbl_type ( ( x1 , d1 ) , .. , ( xn , dn ) ) b_func_map decl_list stmt pars_map tbl_map :: :: regular

ffblock {{ tex { \mathit{ffblock} } }} :: ffblock_ ::=
{{ com fixed-function block }}
| ff :: :: ff

%Fence between pblock and pblock_list
embed
{{ hol

}}
grammar

arch_block :: arch_block_ ::=
{{ com architectural block }}
| inp :: :: inp
| pbl x ( e1 , .. , en ) :: :: pbl
| ffbl x :: :: ffbl
| out :: :: out

pblock_list {{ tex \overline{ \mathit{pb} } }} :: pblock_list_ ::=
{{ com list of programmable blocks }}
{{ hol (pblock list) }}

pblock_map {{ tex B_p }} :: pblock_map_ ::=
{{ com programmable block map }}
{{ hol (string |-> pblock) }}

ffblock_map {{ tex B_{ \mathrm{ff} } }} :: ffblock_map_ ::=
{{ com fixed-function block map }}
{{ hol (string |-> ffblock) }}

in_out_list {{ tex \overline{ \mathit{io} } }} :: in_out_list_ ::=
{{ com list of input and output }}
{{ hol (in_out list) }}

%Fence between in_out_list and input_f
embed
{{ hol

}}
grammar

%The list of architectural blocks describes stages of the pipeline in a specific (package in a specific) architecture
ab_list {{ tex \overline{ \mathit{ab} } }} :: ab_list_ ::=
{{ com list of architectural blocks }}
{{ hol (arch_block list) }}

%The input function modifies the raw input at the start of the pipeline
input_f {{ tex { \mathit{in}_A } }} :: input_f_ ::=
{{ com input function }}
{{ hol ((in_out_list # ascope_ty) -> (in_out_list # ascope_ty) option) }}

%The output function modifies the raw output at the end of the pipeline
output_f {{ tex { \mathit{out}_A } }} :: output_f_ ::=
{{ com output function }}
{{ hol ((in_out_list # ascope_ty) -> (in_out_list # ascope_ty) option) }}

%This function is used to copy things from the architecture when a programmable block begins
copyin_pbl {{ tex { \mathit{in}_p } }} :: copyin_pbl_ ::=
{{ com copy-in to programmable blocks function }}
{{ hol ((x list # d list # e list # ascope_ty # pbl_type) -> scope option) }}

%This function is used to copy out things to the architecture after a programmable block is finished
copyout_pbl {{ tex { \mathit{out}_p } }} :: copyout_pbl_ ::=
{{ com copy-out from programmable blocks function }}
{{ hol ((g_scope list # ascope_ty # d list # x list # pbl_type # status) -> ascope_ty option) }}

%Fence between ab_list and actx
embed
{{ hol

}}
grammar

%The architectural context stores everything that's needed for, but stays invariant over, architecture-level reductions
actx {{ tex { \mathit{ctx}_A } }} :: actx_ ::=
{{ com architectural context }}
{{ hol (ab_list # pblock_map # ffblock_map # input_f # output_f # copyin_pbl # copyout_pbl # ext_map # func_map) }}
| ( ab_list , pblock_map , ffblock_map , input_f , output_f , copyin_pbl , copyout_pbl , ext_map , func_map ) :: M :: tup
  {{ com tuple }}
  {{ hol ([[ab_list]], [[pblock_map]], [[ffblock_map]], [[input_f]], [[output_f]], [[copyin_pbl]], [[copyout_pbl]], [[ext_map]], [[func_map]]) }}

%The context stores everything that's needed for, but stays invariant over, statement reductions
ctx {{ tex \mathit{ctx} }} :: ctx_ ::=
{{ com context }}
{{ hol (ext_map # func_map # b_func_map # pars_map # tbl_map) }}
| ( ext_map , func_map , b_func_map , pars_map , tbl_map ) :: M :: tup
  {{ com tuple }}
  {{ hol ([[ext_map]], [[func_map]], [[b_func_map]] , [[pars_map]], [[tbl_map]]) }}
