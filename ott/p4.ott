embed
{{ hol
open bitstringTheory;
open wordsTheory;
}}

%%%%%%%%%%%%%%%%%
% P4 base types %
%%%%%%%%%%%%%%%%%

%x denotes variable name, f denotes field name or function name
%msg denotes error message
metavar x, f, msg ::=
      {{ lex alphanum }}
      {{ hol string }}
      {{ tex [[x]] }}
      {{ com string }}
%TODO Numeral or alphanum?
metavar b ::=
      {{ lex numeral }}
      {{ hol bool }}
      {{ tex [[b]] }}
      {{ com boolean }}
metavar bl ::=
      {{ lex numeral }}
      {{ hol bool list }}
      {{ tex [[bl]] }}
      {{ com integer }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Auxiliary metavariables %
%%%%%%%%%%%%%%%%%%%%%%%%%%%

metavar i ::=
      {{ lex numeral }}
      {{ hol num }}
      {{ tex [[i]] }}
      {{ com natural number }}
indexvar m, n, o ::=
  {{ lex numeral }}
  {{ coq nat }}
  {{ hol num }}
  {{ com indices }}
grammar 

%Statement semantics
%TODO: Add directed arguments (in, out, inout)

%%%%%%%%%%%%%%%
% Expressions %
%%%%%%%%%%%%%%%

unop {{ tex \ominus }}:: unop_ ::=
| ! :: :: neg
  {{ com negation }}
  {{ tex ! }}
| ~ :: :: compl
  {{ com bitwise complement }}
  {{ tex \neg }}
| - :: :: neg_signed
  {{ com signed negation }}
| + :: :: un_plus
  %Defined as no-op for all values?
  {{ com unary plus }}

%Binary operations
%Split these up into operations (bv # bv -> bv) and predicates (bv # bv -> bool)?
%TODO: Saturating addition?
%TODO: Saturating subtraction?
binop {{ tex \oplus }} :: binop_ ::=
| * :: :: mul
  {{ com multiplication }}
  {{ tex \times }}
| / :: :: div
  {{ com division }}
| mod :: :: mod
  {{ com modulo }}
  {{ tex \bmod }}
  %Denoted by % in P4 specification
| + :: :: add
  {{ com addition }}
| - :: :: sub
  {{ com subtraction }}
| SHL :: :: shl
  {{ com logical left-shift }}
  {{ tex \ll }}
| SHR :: :: shr
  {{ com logical right-shift }}
  {{ tex \gg }}
| LE :: :: le
  {{ com less or equal }}
  {{ tex \leq }}
| GE :: :: ge
  {{ com greater or equal }}
  {{ tex \geq }}
| < :: :: lt
  {{ com less }}
  {{ tex < }}
| > :: :: gt
  {{ com greater }}
  {{ tex > }}
| NE :: :: neq
  {{ com not equal }}
  {{ tex \neq }}
| EQ :: :: eq
  {{ com equal }}
  {{ tex = }}
| & :: :: and
  {{ com bitwise and }}
| ^ :: :: xor
  {{ com bitwise xor }}
  {{ tex \underline{\vee} }}
| '|' :: :: or
  {{ com bitwise or }}
  {{ tex \mid }}
| AND :: :: bin_and
  {{ com binary and }}
  {{ tex \land }}
| OR :: :: bin_or
  {{ com binary or }}
  {{ tex \lor }}

% Can't be called "bool" since this already exists in HOL4
boolv :: boolv_ ::=
{{ hol bool }}
{{ com boolean }}
| true :: M :: true
  {{ hol T }}
| false :: M :: false
  {{ hol F }}
| b :: M :: free
  {{ hol [[b]] }}

intv :: intv_ ::=
{{ hol (bl # num) }}
{{ com integer }}
| bl n :: M :: bl
  {{ hol ([[bl]], [[n]]) }}

%Base types
bt {{ tex bt }} :: bt_ ::=
{{ com base types }}
| bool_t :: :: bool
  {{ tex { \mathrm{bool}_{ \mathrm{t} } } }}
| int_t :: :: int
  {{ tex { \mathrm{int}_{ \mathrm{t} } } }}

%Types
t {{ tex t }} :: t_ ::=
{{ com types }}
| bt :: :: base
| struct_t t1 , ... , tn :: :: struct
  {{ tex { \mathrm{struct}_{ \mathrm{t} }\,\, t_1 , \ldots , t_n } }}
%Note: Header type does not reflect validity bit in any way, since this is the same for all headers
| header_t t1 , ... , tn :: :: header
  {{ tex { \mathrm{header}_{ \mathrm{t} }\,\, t_1 , \ldots , t_n } }}

%TODO: String literal
%TODO: L-values and identifiers
%TODO: Enums
%Constants should be thought of as "values of variables we look up"
v :: v_ ::=
{{ com constant }}
| boolv :: :: bool
  {{ com boolean value }}
%intv currently represents both signed and unsigned words
| intv :: :: int
  {{ com integer }}
| struct { x1 = v1 ; ... ; xn = vn } :: :: struct
  {{ com struct }} %TODO: Ott User Guide 12.2  List comprehension forms
| header boolv { x1 = v1 ; ... ; xn = vn } :: :: header
% A header is like a struct, but with a validity bit.
% Headers also have different well-formedness conditions (for example, headers cannot be nested).
%TODO: We must have the following header methods:
%      isValid()
%      setValid()
%      setInvalid()
%      Should these be modeled as statements, or should they
%      be pre-set in the function map?
  {{ com header }}
%%TODO: An extern should contain an internally visible list of mappings between variable names and constants,
%%      and a map from function names to their bodies and arguments
%% See https://github.com/p4lang/p4c/blob/main/p4include/core.p4 , e.g. packet_in definition
| errmsg x :: :: err
  {{ com error message }}
%TODO: Represent uninitialised variables? Default values?
%See https://p4lang.github.io/p4-spec/docs/P4-16-v1.2.2.html#sec-uninitialized-values-and-writing-invalid-headers
| uninit :: :: uninit
  {{ com uninitialized value }}
  {{ tex ? }}
  {{ hol (ARB) }}

%TODO: Array element
%TODO: Bitslice
lval :: lval_ ::=
| x :: :: varname
  {{ com variable name }}
| lval . f :: :: field
  {{ com field access }}
| ( lval ) :: X :: paren
  {{ hol ([[lval]]) }}

%TODO: Casts
%TODO: Lists
%TODO: Tuples
%TODO: Conditional operator
e :: e_ ::=
{{ com expression }}
| v :: :: v
 {{com constant value}}
| x :: :: var
  {{ com variable name }}
| { e1 , .. , en } :: :: list
  {{ com expression list }}
| e . e' :: :: acc
  {{ com field access }}
%TODO: Struct field manipulation (does not exist in P4, solely meta) now among judgments
%| v with f := e :: I :: with
%  {{ com struct field manipulation }}
| unop e :: :: unop
  {{ com unary operation }}
  {{ tex [[unop]] [[e]] }}
| e1 binop e2 :: :: binop
  {{ com binary operation }}
  {{ tex [[e1]] [[binop]] [[e2]] }}
| e1 ++ e2 :: :: concat
  {{ com concatenation of bit-strings }}
| e1 [ e2 : e3 ] :: :: slice
  {{ com bit-slice }}
| call f ( e1 , .. , en ) :: :: func_call
  {{ com function call }}
  {{ hol (exp_func_call [[f]] [[e1 .. en]]) }}
| exec stmt :: I :: func_exec
  {{ com function execution }}
| select e { v1 : x1 ; ... ; vn : xn } x :: :: select
  {{ com select }}
%select expression can only be used in parsers
%e is the expression used to select result
%the list consists of values that are matched to the evaluated expression
% x is the default value (TODO: Should be optional)
| ( e ) :: X :: paren
  {{ hol ([[e]]) }}

%TODO: Trying to make a new definition for expression lists (mainly for function
%      arguments) proved problematic.
%      If all e_list productions are meta, then you get e_list as a type abbreviation of "e list",
%      which is either undefined at the point where the abbreviation is made, or
%      e_list is unknown when defining e (and specifically function call, which would use e_list).
%      In both situations, mutually recursive definitions are not possible.
%
%      If nothing is meta and e_list is not exported to a type abbreviation, you risk the function call semantics not understanding the "e_list" and "e list" correspondence. However, this seems to work currently.
e_list :: e_list_ ::=
{{ com list of expressions }}
{{ hol (e list) }}
| empty_el :: M :: empty
  {{ com empty expression list }}
  {{ hol ([]:e list) }}
| e1 , .. , en :: M :: exps
  {{ com list of expressions }}
  {{ hol ([[e1 .. en]]) }}
| e_list ++ e_list' :: M :: append
  {{ com append two e_lists }}
  {{ hol ([[e_list]] ++ [[e_list']]) }}
| update ( e , i , e_list ) :: M :: update
  {{ com update entry of expression list }}
  {{ hol (LUPDATE [[e]] [[i]] [[e_list]]) }}
  {{ tex ([[i]] \mapsto  [[e]]) [[e_list]] }}
| ( e_list ) :: S :: paren
  {{ hol ([[e_list]]) }}


%%%%%%%%%%%%%%
% Statements %
%%%%%%%%%%%%%%

%decl :: decl_ ::=
%{{ com declaration }}
%| empty_decl :: :: empty
%  {{ com empty declaration }}
%  {{ tex \emptyset_{ \mathrm{decl} } }}
%| declare x e :: :: stmt
%  {{ com declaration }}
%  {{ tex [[x]] \mathrel{\mathop:}:= [[e]] }}
%| decl1 ; decl2 :: :: seq
%  {{ com sequence }}

pars_fin {{ tex p_{ \mathrm{fin} } }} :: pars_fin ::=
{{ com final parser states }}
| Accept :: :: accept
  {{ com accepted state }}
| Reject :: :: reject
  {{ com rejected state }}

pars_next {{ tex p }} :: pars_next_ ::=
{{ com parser next state }}
| Trans x :: :: trans
  {{ com transition to named state }}
| pars_fin :: :: pars_fin
  {{ com final state }}

%TODO: Switch statement
stmt :: stmt_ ::=
{{ com statement }}
| empty_stmt :: :: empty
  {{ com empty statement }}
  {{ tex \emptyset_{ \mathrm{stmt} } }}
| assign lval e :: :: ass
  {{ com assignment }}
  {{ tex [[lval]] \mathrel{\mathop:}= [[e]] }}
| if e then stmt1 else stmt2 :: :: cond
  {{ com conditional }}
%TODO: This should have a type name x instead of t, which is looked up in the type environment.
| decl x t :: :: declare
  {{ com declaration }}
| begin stmt end :: :: block 
  {{ com block }}
  {{ tex \{ [[stmt]] \} }}
| begin' stmt end' :: I :: block_ip
  {{ com block in progress }}
  {{ tex [ [[stmt]] ] }}
| return e :: :: ret
  {{ com return }}
| stmt1 ; stmt2 :: :: seq
  {{ com sequence }}
| verify e e' :: :: verify
  % e is predicate, e' is error message
  {{ com verify }}
| transition e :: :: trans
  % e should evaluate to a parser state name
  {{ com transition }}
  {{ tex \mathbf{transition}\, [[e]] }}

func_map {{ tex F }} :: func_map_ ::=
{{ com function map  }}
{{ hol (string |-> (stmt # (string list))) }}
| empty :: M :: empty
  {{ com empty function map }}
  {{ hol FEMPTY }}
| func_map + [ x |-> stmt ] :: M :: update
  {{ com update variable mapping }}
  {{ hol (FUPDATE [[func_map]] ([[x]], [[stmt]])) }}

% TODO: Could be just an abbreviation, since it's never changed...
pars_map {{ tex P }} :: pars_map_ ::=
{{ com parser state map  }}
{{ hol (string |-> stmt) }}
| empty :: M :: empty
  {{ com empty parser state map }}
  {{ hol FEMPTY }}

% TODO: Could be just an abbreviation, since it's never changed...
type_map {{ tex T }} :: type_map_ ::=
{{ com type environment  }}
{{ hol (string |-> ((string # t) list)) }}
| empty :: M :: empty
  {{ com empty type environment }}
  {{ hol FEMPTY }}

%%%%%%%%%%%%%%%%%%%
% Execution state %
%%%%%%%%%%%%%%%%%%%
%Note that this is not part of the P4 specification, but made up for verification purposes.

%Execution status.
status {{ tex t }}:: status_ ::=
 {{ com execution status }}
| Running :: I :: running
  {{ tex { \mathbf{R} } }}
| Return v :: I :: return
  {{ tex { \mathbf{Ret} \,\, [[v]]} }}
| pars_next :: I :: pars_next
| TypeError :: I :: type_error
  {{ tex { \bot } }}

scope {{ tex \gamma }} :: scope_ ::=
{{ hol (string |-> v) }}
{{ com frame/variable environment of current scope }}
| emptyscope :: M :: empty
  {{ com empty stack frame }}
  {{ hol FEMPTY }}
  {{ tex {\gamma}_{ \emptyset } }}
| scope + [ x |-> v ] :: M :: update
  {{ com update variable mapping }}
  {{ hol (FUPDATE [[scope]] ([[x]], [[v]])) }}
  {{ tex ([[x]] \mapsto  [[v]]) [[scope]] }}
| scope ++ [ x1 |-> v1 , .. , xn |-> vn ] :: M :: update_list
  {{ com update variable mapping }}
  {{ hol (FUPDATE_LIST [[scope]] [[x1 v1 .. xn vn]]) }}
%TODO LaTeX cannot have dot form...
  {{ tex \forall i \leq n. \,\, (x_i \mapsto  \mathit{v}_i) \,\, [[scope]] }}
| ( scope ) :: S :: paren
  {{ hol ([[scope]]) }}
| G scope :: M :: global
  {{ com global scope }}
  {{ tex {[[scope]]}_G }}
  {{ hol [[scope]] }}
  

%Fence so that ott does not re-order curr_stack_frame
embed
{{ hol

}}
grammar

curr_stack_frame {{ tex \varepsilon }} :: curr_stack_frame_ ::=
{{ hol (scope list) }}
{{ com current stack frame - stack of block scopes }}
| emptycsf :: M :: empty
  {{ hol ([]:scope list) }}
  {{ tex {\emptyset}_{\varepsilon} }}
| [ scope1 , .. , scopen ] :: M :: list
  {{ hol ([[scope1 .. scopen]]) }}
| tl curr_stack_frame :: M :: tl
  {{ hol (TL [[curr_stack_frame]]) }}
  {{ tex \mathrm{tl} ([[curr_stack_frame]]) }}
| scope '::' curr_stack_frame' :: M :: cons
  {{ hol ([[scope]] :: [[curr_stack_frame']]) }}
  {{ tex [[scope]] :: [[curr_stack_frame']] }}
| curr_stack_frame ++ curr_stack_frame' :: M :: append
  {{ hol ([[curr_stack_frame]] ++ [[curr_stack_frame']]) }}
  {{ tex [[curr_stack_frame]] \mathrel{\mathop+}+ [[curr_stack_frame']] }}
| update ( scope , i , curr_stack_frame ) :: M :: update
  {{ hol (LUPDATE [[scope]] [[i]] [[curr_stack_frame]]) }}
  {{ tex ([[i]] \mapsto [[scope]]) [[curr_stack_frame]] }}
| ( curr_stack_frame ) :: S :: paren
  {{ hol ([[curr_stack_frame]]) }}

%Fence so that ott does not re-order curr_stack_frame
embed
{{ hol

}}
grammar

call_stack {{ tex E }} :: call_stack_ ::=
{{ com stack of caller stack frames }}
{{ hol (curr_stack_frame list) }}
| emptycs :: M :: empty
  {{ hol ([]:curr_stack_frame list) }}
  {{ tex {\emptyset}_{E} }}
| [ curr_stack_frame1 , .. , curr_stack_framen ] :: M :: list
  {{ hol ([[curr_stack_frame1 .. curr_stack_framen]]) }}
| curr_stack_frame '::' call_stack :: M :: cons
  {{ hol ([[curr_stack_frame]] :: [[call_stack]]) }}
  {{ tex [[curr_stack_frame]] :: [[call_stack]] }}
| ( call_stack ) :: S :: paren
  {{ hol ([[call_stack]]) }}

stacks {{ tex \sigma }} :: stacks_ ::=
 {{ com stacks in execution state }}
| ( curr_stack_frame , call_stack ) :: :: tup

state {{ tex s}} :: state_ ::=
 {{ com execution state }}
| ( stacks , status ) :: :: tup


%%%%%%%%%%%%%%%%%%%%%%%%
% Expression semantics %
%%%%%%%%%%%%%%%%%%%%%%%%

terminals :: terminals_ ::=
%Statement reduction
| -> :: :: rightarrow {{ tex \rightarrow }}
%Expression reduction
| ~> :: :: rightsquigarrow {{ tex \rightsquigarrow }}
%Parser state reduction
| --> :: :: longrightarrow {{ tex \longrightarrow }}

formula :: formula_ ::=
{{ com formulas }}
| judgement :: :: judgement
  {{ com judgement }}
%Expressions
| ! b = b' :: M :: neg_bool
  {{ hol (~[[b]] = [[b']]) }}
| ~ intv = intv' :: M :: compl
  {{ hol (bnot [[intv]] = [[intv']]) }}
| - intv = intv' :: M :: neg_signed
  {{ hol (intv_unop unop_neg_signed [[intv]] = [[intv']]) }}
| + intv = intv' :: M :: un_plus
  %TODO: Specification says this is a noop...
  {{ hol ([[intv]] = [[intv']]) }}
%TODO mul
| intv * intv' = intv'' :: M :: mul
  {{ hol (intv_binop binop_mul [[intv]] [[intv']] = [[intv'']]) }}
%TODO div
| intv / intv' = intv'' :: M :: div
  {{ hol (intv_binop binop_div [[intv]] [[intv']] = [[intv'']]) }}
%TODO mod
| intv mod intv' = intv'' :: M :: mod
  {{ hol (intv_binop binop_mod [[intv]] [[intv']] = [[intv'']]) }}
%TODO add
%"add_def" provided by bitstringTheory does not respect word arithmetic
| intv + intv' = intv'' :: M :: add
  {{ hol (intv_binop binop_add [[intv]] [[intv']] = [[intv'']]) }}
%TODO sub
| intv - intv' = intv'' :: M :: sub
  {{ hol (intv_binop binop_sub [[intv]] [[intv']] = [[intv'']]) }}
| intv EQ intv' = b :: M :: eq_word
  {{ hol (([[intv]] = [[intv']]) <=> [[b]]) }}
%TODO: Boolean binops
| b EQ b' = b'' :: M :: eq_bool
  {{ hol ([[b]] = [[b']] <=> [[b'']]) }}
| intv SHL intv' = intv'' :: M :: shl
  {{ hol (shiftl [[intv]] [[intv']] = [[intv'']]) }}
  %TODO: Double-check shift left
| intv SHR intv' = intv'' :: M :: shr
  {{ hol (shiftr [[intv]] [[intv']] = [[intv'']]) }}
  %TODO: Double-check shift right
%TODO le
| intv LE intv' = b :: M :: le
  {{ hol ((intv_binpred binop_le [[intv]] [[intv']]) <=> [[b]]) }}
%TODO ge
| intv GE intv' = b :: M :: ge
  {{ hol ((intv_binpred binop_ge [[intv]] [[intv']]) <=> [[b]]) }}
%TODO lt
| intv < intv' = b :: M :: lt
  {{ hol ((intv_binpred binop_lt [[intv]] [[intv']]) <=> [[b]]) }}
%TODO gt
| intv > intv' = b :: M :: gt
  {{ hol ((intv_binpred binop_gt [[intv]] [[intv']]) <=> [[b]]) }}
| intv NE intv' = b :: M :: neq_word
  {{ hol (([[intv]] <> [[intv']]) <=> [[b]]) }}
| intv & intv' = intv'' :: M :: and_word
  {{ hol (band [[intv]] [[intv']] = [[intv'']]) }}
| intv ^ intv' = intv'' :: M :: xor_word
  {{ hol (bxor [[intv]] [[intv']] = [[intv'']]) }}
  %TODO: LaTeX XOR
| intv '|' intv' = intv'' :: M :: or_word
  {{ hol (bor [[intv]] [[intv']] = [[intv'']]) }}
%TODO: Boolean binops
| b AND b' = b'' :: M :: and_bool
  {{ hol ([[b]] /\ [[b']] = [[b'']]) }}
%TODO: Boolean binops
| b OR b' = b'' :: M :: or_bool
  {{ hol ([[b]] \/ [[b']] = [[b'']]) }}

%Type-transforming operations
| curr_stack_frame = hd call_stack :: M :: call_stack_hd
  {{ hol ([[curr_stack_frame]] = HD [[call_stack]]) }}
  {{ tex [[curr_stack_frame]] = \mathrm{hd} [[call_stack]] }}
| scope = curr_stack_frame [ i ] :: M :: curr_stack_frame_index
  {{ hol ([[scope]] = EL [[i]] [[curr_stack_frame]]) }}
| ( stmt , x1 , .. , xn ) = func_map ( f ) :: M :: func_lookup
  {{ com function lookup }}
  {{ hol (FLOOKUP [[func_map]] [[f]] = SOME ([[stmt]], [[x1 .. xn]])) }}
| find_index_max ( curr_stack_frame , x ) = i :: M :: find_index_scope_max
  {{ com find max index of variable's scope }}
  %INDEX_FIND finds the first occurrence, starting from head and going backwards in list
  {{ hol (FST (THE (INDEX_FIND 0 (\sf. IS_SOME (FLOOKUP sf [[x]])) [[curr_stack_frame]])) = [[i]]) }}
  {{ tex i = \mathrm{max} \, \{ j . \,\, [[x]]  \in \mathrm{dom} ( [[curr_stack_frame]] [j] )   \} }}
%  {{ tex [[x]] \in \mathrm{dom}([[curr_stack_frame]][ [[i]] ]) \land \forall j . \,\, j > [[i]] \Rightarrow [[x]] \notin \mathrm{dom}([[curr_stack_frame]][j]) }}
| length ( curr_stack_frame ) = i :: M :: find_length
  {{ com find the current stack frame length }}
  {{ tex [[i]] = length ([[curr_stack_frame]])}}
  {{ hol ([[i]] = LENGTH [[curr_stack_frame]]) }}
| v = scope ( x ) :: M :: lookup
  {{ com look-up of variable in scope }}
  {{ hol (FLOOKUP [[scope]] [[x]] = SOME [[v]]) }}
| v = struct { x1 = v1 ; ... ; xn = vn } ( x ) :: M :: s_access
  {{ com access of field in struct }}
  {{ hol (FIND (\(k, v). k = [[x]]) [[x1 v1 ... xn vn]] = SOME ([[x]], [[v]])) }}
| v = header boolv { x1 = v1 ; ... ; xn = vn } ( x ) :: M :: h_access
  {{ com access of field in header }}
  {{ hol (FIND (\(k, v). k = [[x]]) [[x1 v1 ... xn vn]] = SOME ([[x]], [[v]])) }}
%| v'' = ( v' with f := v ) :: M :: set_field
%  {{ com set field of struct }}
| e = e_list [ i ] :: M :: args_index
  {{ hol ([[e]] = EL [[i]] [[e_list]]) }}
| e = hd e_list :: M :: args_hd
  {{ hol ([[e]] = HD [[e_list]]) }}
  {{ tex [[e]] = \mathrm{hd} \,\, [[e_list]] }}
| x' = { v1 : x1 ; ... ; vn : xn } x ( v ) :: M :: sel_access
  {{ com access of string in select key-value list }}
  {{ hol (FIND (\(ks, s). ks = [[v]]) [[v1 x1 ... vn xn]] = SOME ([[v]], [[x']])) }}
| v notin { v1 : x1 ; ... ; vn : xn } x :: M :: sel_def
  {{ com default string in select key-value list }}
  {{ hol (FIND (\(ks, s). ks = [[v]]) [[v1 x1 ... vn xn]] = NONE) }}

%Function argument resolution
%TODO: Replace with expression list
%| v_list ++ e_list' = e_list :: M :: func_args_append
%  {{ com pattern match on constant and non-constant function arguments }}
%  {{ hol (([[v_list]] ++ [[e_list']]) = [[e_list]]) }}

%Conditions
%TODO: Remove, with new separate "bool" definition?
| b = true :: M :: is_true
  {{ com condition true }}
  {{ hol ([[b]] = T) }}
  {{ tex [[b]] = \mathrm{True} }}
| b = false :: M :: is_false
  {{ com condition false }}
  {{ hol ([[b]] = F) }}
  {{ tex [[b]] = \mathrm{False} }}
| is_empty ( e_list ) :: M :: args_empty
  {{ com function arguments empty }}
  {{ hol (NULL [[e_list]]) }}
  {{ tex \mathit{e}_1 , .. , \mathit{e}_n = \{ \} }}

%Equalities
| scope = scope' :: M :: scope_eq
  {{ com scope equality }}
  {{ hol ([[scope]] = [[scope']]) }}
| curr_stack_frame = curr_stack_frame' :: M :: curr_stack_frame_eq
  {{ com curr_stack_frame equality }}
  {{ hol ([[curr_stack_frame]] = [[curr_stack_frame']]) }}
| call_stack = call_stack' :: M :: call_stack_eq
  {{ com call_stack equality }}
  {{ hol ([[call_stack]] = [[call_stack']]) }}
%Note the modified equality signs in the below.
%These help to distinguish between e and e_list, as well as provide a single parse
%considering some equalities between expressions are explicitly typeset
| e_list =' e_list' :: M :: args_eq
  {{ com args equality }}
  {{ hol ([[e_list]] = [[e_list']]) }}
  {{ tex [[e_list]] = [[e_list']] }}

%MISC (TODO)
%TODO: Equalities and inequalities on numerals
| i' = i + 1 :: M :: num_inc
  {{ com numeral increment }}
  {{ hol ([[i']] = [[i]] + 1) }}
  {{ tex [[i']] = [[i]] + 1 }}
| i = length ( e_list ) :: M :: num_len
  {{ com length of list }}
  {{ hol ([[i]] = LENGTH [[e_list]]) }}
  {{ tex [[i]] = \mathrm{len} \,\, [[e_list]] }}
| i < length ( e_list ) :: M :: num_in_rg
  {{ com numeral in range }}
  {{ hol ([[i]] < LENGTH [[e_list]]) }}
  {{ tex [[i]] < \mathrm{len}(\mathit{e}) }}
| is_consts ( e_list ) :: M :: args_const
  {{ com function arguments constant }}
  {{ hol (is_consts [[e_list]]) }}
  %TODO: Fix typesetting
  {{ tex \mathrm{is\_consts} \,\, [[e_list]] }}
| stmt = pars_map ( x ) :: M :: pars_lookup
  {{ com parser state map lookup }}
  {{ hol (FLOOKUP [[pars_map]] [[x]] = SOME ([[stmt]])) }}
| x = ParserError :: M :: pars_err
  {{ com parser error literal }}
  {{ hol ([[x]] = "ParserError") }}
  {{ tex [[x]] = ``\mathit{ParserError}" }}
  %Dummy to keep syntax highlighting from freaking out: "
| v = lookup_lval ( curr_stack_frame , lval ) :: M :: lookup_lval
  {{ com instantaneous lookup of lvals }}
  {{ hol ([[v]] = lookup_lval [[curr_stack_frame]]  [[lval]]) }}
  {{ tex [[v]] = \mathrm{lookup\_lval} ([[curr_stack_frame]], [[lval]]) }}
| v'' = ( struct { x1 = v1 ; ... ; xn = vn } with x := v ) :: M :: s_fld_upd
  {{ com update of struct field }}
  {{ hol ([[v'']] = v_struct (LUPDATE ([[x]], [[v]]) (THE (INDEX_OF [[x]] (MAP FST [[x1 v1 ... xn vn]]))) [[x1 v1 ... xn vn]])) }}
| v'' = ( header boolv { x1 = v1 ; ... ; xn = vn } with x := v ) :: M :: h_fld_upd
  {{ com update of struct field }}
  {{ hol ([[v'']] = v_header [[boolv]] (LUPDATE ([[x]], [[v]]) (THE (INDEX_OF [[x]] (MAP FST [[x1 v1 ... xn vn]]))) [[x1 v1 ... xn vn]])) }}
| not_final_state ( x ) :: M :: not_final
  {{ com x is not name of final state }}
  {{ hol (([[x]] <> "accept") /\ ([[x]] <> "reject")) }}
| x = "accept" :: M :: is_accept
  {{ com x is accept }}
  {{ hol ([[x]] = "accept") }}
  {{ tex [[x]] = ``\mathit{accept}" }}
  %Dummy to keep syntax highlighting from freaking out: "
| x = "reject" :: M :: is_reject
  {{ com x is reject }}
  {{ hol ([[x]] = "reject") }}
  {{ tex [[x]] = ``\mathit{reject}" }}
  %Dummy to keep syntax highlighting from freaking out: "


%TODO: Review if "is_const" is needed...
embed
{{ hol
val is_const_def = Define `
    ( is_const (e_v _) = T)
/\  ( is_const _ = F)
`;
val is_consts_def = Define `
    (is_consts el = ~(EXISTS (\e. ~(is_const e)) el))
`;
(* Access the field f of a struct or a header *)
val acc_f_def = Define `
    (acc_f (v_struct s) f = SOME (SND (THE (FIND (\(f', v). f' = f) s))))
/\  (acc_f (v_header _ s) f = SOME (SND (THE (FIND (\(f', v). f' = f) s))))
/\  (acc_f _ f = NONE)
`;
(*
val get_lval_root_def = Define `
    (get_lval_root (lval_varname x) = x)
/\  (get_lval_root (lval_field lval f) = get_lval_root lval)
`;
val get_lval_fields_rev_def = Define `
    (get_lval_fields_rev (lval_varname x) = [])
/\  (get_lval_fields_rev (lval_field lval f) = f::(get_lval_fields_rev lval))
`;
val get_lval_fields_def = Define `
    (get_lval_fields lval = REVERSE (get_lval_fields_rev lval))
`;
*)
(* Look up the value of a variable x in the current stack frame sf *)
val lookup_def = Define `
    (lookup (sf:scope list) x = THE (FLOOKUP (EL (FST (THE (INDEX_FIND 0 (\sc. IS_SOME (FLOOKUP sc x)) sf))) sf) x)
    )
`;
(* Look up the value of a l-value (variables + fields of struct-valued variables) in
 * the current stack frame sf. *)
val lookup_lval_def = Define `
    (lookup_lval (sf:scope list) (lval_varname x) = (lookup sf x))
/\  (lookup_lval (sf:scope list) (lval_field lval f) = THE (acc_f (lookup_lval sf lval) f))
`;
(* TODO: Check that these are correct... *)
val get_word_unop_def = Define `
    (get_word_unop unop_compl = word_1comp)
/\  (get_word_unop unop_neg_signed = word_2comp)
/\  (get_word_unop unop_un_plus = (\w. w))
`;
val intv_unop_def = Define `
    (intv_unop unop (v, 64) = (w2v ((get_word_unop unop) ((v2w v): 64 word)), 64) )
`;
val get_word_binop_def = Define `
    (get_word_binop binop_mul = word_mul)

/\  (get_word_binop binop_div = word_div)
/\  (get_word_binop binop_mod = word_mod)
/\  (get_word_binop binop_add = word_add)

/\  (get_word_binop binop_sub = word_sub)

/\  (get_word_binop binop_shl = word_lsl_bv)

/\  (get_word_binop binop_shr = word_lsr_bv)
/\  (get_word_binop binop_and = word_and)
/\  (get_word_binop binop_xor = word_xor)
/\  (get_word_binop binop_or = word_or)
`;
%TODO This is highly iffy, but trying to achieve the same by overloading on different n des not work so well...
val intv_binop_def = Define `
    (intv_binop binop (v, n) (v', n') =
    if n = n' then
      case n of
      | 64 => SOME (w2v ((get_word_binop binop) ((v2w v): 64 word) ((v2w v'): 64 word)), 64)
      | 32 => SOME (w2v ((get_word_binop binop) ((v2w v): 32 word) ((v2w v'): 32 word)), 32)
      | _ => NONE
    else NONE)
`;
val get_word_binpred_def = Define `
    (get_word_binpred binop_le = word_le)
/\  (get_word_binpred binop_ge = word_ge)
/\  (get_word_binpred binop_lt = word_lt)
/\  (get_word_binpred binop_gt = word_gt)
/\  (get_word_binpred binop_neq = (\w1 w2. ~(w1 = w2)))
/\  (get_word_binpred binop_eq = (\w1 w2. w1 = w2))
`;
val intv_binpred_def = Define `
    (intv_binpred binpred (v, 64) (v', 64) = (((get_word_binpred binpred) ((v2w v): 64 word) ((v2w v'): 64 word)):boolv))
/\  (intv_binpred binpred (v, 32) (v', 32) = (((get_word_binpred binpred) ((v2w v): 32 word) ((v2w v'): 32 word)):boolv))
`;
val intv_concat_def = Define `
    (intv_concat (v, n) (v', n') =
      (v ++ v', n + n')
)
`;
(* TODO: Check big-endianness vs. little-endianness (order of arguments of SEG) *)
val intv_bitslice_def = Define `
    (intv_bitslice (v, n) m l =
      (SEG m l v, m - l + 1)
)
`;
}}
grammar

defns
  e_sem :: '' ::=
defn
  [ e ] ( stacks , status ) ~> [ e' ] ( stacks' , status' ) :: :: e_red :: e_
  {{ com expression semantics }}
  %TODO Should use different export homs for LaTeX and HOL4 so that LaTeX hides unnecessary status?
  %{{ tex [ [[e]] ] [[stacks]] \rightsquigarrow [ [[e']] ] [[stacks']] }}
by

%%%%%%%%%%%%%%%%%
%Variable look-up

  find_index_max ( curr_stack_frame, x ) = i
  scope = curr_stack_frame [ i ]
  v = scope ( x )
  ----------------------------------- :: lookup
  [x] ( ( curr_stack_frame, call_stack ) , Running ) ~> [v] ( ( curr_stack_frame, call_stack ) , Running )

%%%%%%%%%%%%%%
%Function call + exec (in expression)

  %Resolving arguments to function call - assigning arguments to new stack frame
  ( stmt , x1 , .. , xn ) = func_map ( f )
  scope' = emptyscope ++ [ x1 |->  v1 , .. , xn |-> vn ]
  G scope = curr_stack_frame[0]
  curr_stack_frame' = scope' :: [G scope]
  call_stack' = tl curr_stack_frame :: call_stack
  ----------------------------------- :: func_call_newframe
  [call f ( v1 , .. , vn )] ( ( curr_stack_frame , call_stack ) , Running ) ~> [ exec stmt ] ( ( curr_stack_frame' , call_stack' ) , Running )

  [stmt] ( stacks , Running ) -> [stmt'] ( stacks' , Running )
  ----------------------------------- :: func_exec
  [exec stmt] ( stacks , Running ) ~> [exec stmt'] ( stacks' , Running )

%TODO: Note that this is a simplification of the return mechanism
  ----------------------------------- :: func_ret
  [exec empty_stmt] ( stacks , Return v ) ~> [v] ( stacks' , Running )

%%%%%%%%%%%%%%%%%%%%
%Struct field access

  v = struct { f1 = v1 ; ... ; fn = vn } ( f )
  ----------------------------------- :: s_acc
  [ struct { f1 = v1 ; ... ; fn = vn } . f] ( stacks , Running ) ~> [v] ( stacks , Running )

%%%%%%%%%%%%%%%%%%%%
%Header field access

  v = header boolv { f1 = v1 ; ... ; fn = vn } ( f )
  ----------------------------------- :: h_acc
  [ header boolv { f1 = v1 ; ... ; fn = vn } . f] ( stacks , Running ) ~> [v] ( stacks , Running )

%%%%%%%%%%%%%%%%%%
%Select expression

%Case select lookup
  x' = { v1 : x1 ; ... ; vn : xn } x ( v )
  ----------------------------------- :: sel_acc
  [ select v { v1 : x1 ; ... ; vn : xn } x ] ( stacks , Running ) ~> [ x' ] ( stacks , Running )

%Case default
  v notin { v1 : x1 ; ... ; vn : xn } x
  ----------------------------------- :: sel_def
  [ select v { v1 : x1 ; ... ; vn : xn } x ] ( stacks , Running ) ~> [ x ] ( stacks , Running )

%%%%%%%%%%%%%
%"Reduction of argument" rules

%Resolving arguments to function call - reduction
  %TODO: force e_list'' to be non-empty?
  e_list' ++ e_list'' =' e1 , .. , en
  is_consts ( e_list' )
  e = hd e_list''
  [ e ] ( stacks , Running ) ~> [ e' ] ( stacks' , Running )
  %TODO: length plus 1 if indexing from 1
  i = length ( e_list' )
  e'1 , .. , e'm =' update ( e' , i , ( e1 , .. , en ) )
  ----------------------------------- :: func_call_args
  [call f ( e1 , .. , en )] ( stacks , Running ) ~> [call f ( e'1 , .. , e'm )] ( stacks , Running )

%Struct/header field accesses
%(looks nicer with left-to-right, since we avoid writing out an explicit struct)
  [e'] ( stacks , Running ) ~> [e''] ( stacks' , Running )
  ----------------------------------- :: acc_arg2
  [e . e'] ( stacks , Running ) ~> [e . e''] ( stacks' , Running )

  [e] ( stacks , Running ) ~> [e'] ( stacks' , Running )
  ----------------------------------- :: acc_arg1
  [e . x] ( stacks , Running ) ~> [e' . x] ( stacks' , Running )

  [e] ( stacks , Running ) ~> [e'] ( stacks' , Running )
  ----------------------------------- :: sel_arg
  [ select e { v1 : x1 ; ... ; vn : xn } x ] ( stacks , Running ) ~> [ select e' { v1 : x1 ; ... ; vn : xn } x ] ( stacks' , Running )

%Unary operations
  [e] ( stacks , Running ) ~> [e'] ( stacks' , Running )
  ----------------------------------- :: unop_arg
  [unop e] ( stacks , Running ) ~> [unop e'] ( stacks' , Running )

%Binary operations
  [e] ( stacks , Running ) ~> [e''] ( stacks' , Running )
  ----------------------------------- :: binop_arg1
  [e binop e'] ( stacks , Running ) ~> [e'' binop e'] ( stacks' , Running )

  [e'] ( stacks , Running ) ~> [e''] ( stacks' , Running )
  ----------------------------------- :: binop_arg2
  [v binop e'] ( stacks , Running ) ~> [e binop e''] ( stacks' , Running )


%%%%%%%%%%%%%%%%%%%
%Unary expressions%
%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%
%Boolean negation

  ! b = b'
  ----------------------------------- :: neg_bool
  [! b] ( stacks , Running ) ~> [b'] ( stacks , Running )

%%%%%%%%%%%%%%%%%%%
%Bitwise complement

  ~ intv = intv'
  ----------------------------------- :: compl
  [~ intv] ( stacks , Running ) ~> [intv'] ( stacks , Running )

%%%%%%%%%%%%%%%%
%Signed negation

  - intv = intv'
  ----------------------------------- :: neg_signed
  [- intv] ( stacks , Running ) ~> [intv'] ( stacks , Running )

%%%%%%%%%%%
%Unary plus

  + intv = intv'
  ----------------------------------- :: un_plus
  [+ intv] ( stacks , Running ) ~> [intv'] ( stacks , Running )


%%%%%%%%%%%%%%%%%%%%
%Binary expressions%
%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%
%Multiplication

  intv * intv' = intv''
  ----------------------------------- :: mul
  [intv * intv'] ( stacks , Running ) ~> [intv''] ( stacks , Running )

%%%%%%%%%%%%%%%
%Division

  intv / intv' = intv''
  ----------------------------------- :: div
  [intv / intv'] ( stacks , Running ) ~> [intv''] ( stacks , Running )

%%%%%%%%%%%%%%%
%Modulo

  intv mod intv' = intv''
  ----------------------------------- :: mod
  [intv mod intv'] ( stacks , Running ) ~> [intv''] ( stacks , Running )

%%%%%%%%%%%%
%Addition

  intv + intv' = intv''
  ----------------------------------- :: add
  [intv + intv'] ( stacks , Running ) ~> [intv''] ( stacks , Running )

%%%%%%%%%%%%
%Subtraction

  intv - intv' = intv''
  ----------------------------------- :: sub
  [intv - intv'] ( stacks , Running ) ~> [intv''] ( stacks , Running )

%%%%%%%%%%%%
%Left shift

  intv SHL intv' = intv''
  ----------------------------------- :: shl
  [intv SHL intv'] ( stacks , Running ) ~> [intv''] ( stacks , Running )

%%%%%%%%%%%%
%Right shift

  intv SHR intv' = intv''
  ----------------------------------- :: shr
  [intv SHR intv'] ( stacks , Running ) ~> [intv''] ( stacks , Running )

%%%%%%%%%%%%%%%%%%%
%Less than or equal

  intv LE intv' = b
  ----------------------------------- :: le
  [intv LE intv'] ( stacks , Running ) ~> [b] ( stacks , Running )

%%%%%%%%%%%%%%%%%%%%%%
%Greater than or equal

  intv GE intv' = b
  ----------------------------------- :: ge
  [intv GE intv'] ( stacks , Running ) ~> [b] ( stacks , Running )

%%%%%%%%%%
%Less than

  intv < intv' = b
  ----------------------------------- :: lt
  [intv < intv'] ( stacks , Running ) ~> [b] ( stacks , Running )

%%%%%%%%%%%%%
%Greater than

  intv > intv' = b
  ----------------------------------- :: gt
  [intv > intv'] ( stacks , Running ) ~> [b] ( stacks , Running )

%%%%%%%%%%%%%
%Not equal

  intv NE intv' = b
  ----------------------------------- :: neq
  [intv NE intv'] ( stacks , Running ) ~> [b] ( stacks , Running )

%%%%%%%%%%%%%
%Equal

  intv EQ intv' = b
  ----------------------------------- :: eq
  [intv EQ intv'] ( stacks , Running ) ~> [b] ( stacks , Running )

%%%%%%%%%%%%%
%Bitwise and

  intv & intv' = intv''
  ----------------------------------- :: and
  [intv & intv'] ( stacks , Running ) ~> [intv''] ( stacks , Running )

%%%%%%%%%%%%%
%Bitwise xor

  intv ^ intv' = intv''
  ----------------------------------- :: xor
  [intv ^ intv'] ( stacks , Running ) ~> [intv''] ( stacks , Running )

%%%%%%%%%%%%%
%Bitwise or

  intv | intv' = intv''
  ----------------------------------- :: or
  [intv | intv'] ( stacks , Running ) ~> [intv''] ( stacks , Running )

%%%%%%%%%%%%%
%Binary and

  b AND b' = b''
  ----------------------------------- :: bin_and
  [b AND b'] ( stacks , Running ) ~> [b''] ( stacks , Running )

%%%%%%%%%%%%%
%Binary or

  b OR b' = b''
  ----------------------------------- :: bin_or
  [b OR b'] ( stacks , Running ) ~> [b''] ( stacks , Running )


%%%%%%%%%%%%%%%%%%%%%%%%%
% Declaration semantics %
%%%%%%%%%%%%%%%%%%%%%%%%%

%defns
%  decl_sem :: '' ::=
%defn
%  [ decl ] state -> [ decl' ] state' :: :: decl_red :: decl_
%  {{ com declaration semantics }}
%by

  %Declare a variable and assign a value - reduction step
%  [e] ( stacks , Running ) ~> [e'] ( stacks' , Running )
%  ----------------------------------- :: decl_e
%  [declare x e] ( stacks , Running ) -> [declare x e'] ( stacks' , Running )

%  scope :: curr_stack_frame' = curr_stack_frame
%  scope' = scope + [ x |-> n ]
%  curr_stack_frame'' = scope' :: curr_stack_frame'
%  ----------------------------------- :: decl_const
%  [declare x n] ( ( curr_stack_frame , call_stack ) , Running ) -> [empty_decl] ( ( curr_stack_frame'' , call_stack ) , Running )

 % [decl1] ( stacks , Running ) -> [decl1'] ( stacks' , Running )
 % ----------------------------------- :: seq1
 % [decl1 ; decl2] ( stacks , Running ) -> [decl1' ; decl2] ( stacks' , Running )

 % ----------------------------------- :: seq2
 % [empty_decl ; decl] ( stacks , Running ) -> [decl] ( stacks , Running )


%%%%%%%%%%%%%%%%%%%%%%%
% Statement semantics %
%%%%%%%%%%%%%%%%%%%%%%%

%TODO: Block
%TODO: Exit
%TODO: Switch

defns
  stmt_sem :: '' ::=
defn
  [ stmt ] state -> [ stmt' ] state' :: :: stmt_red :: stmt_
  {{ com statement semantics }}
by

%%%%%%%%%%%%%%
%Return

  G scope = curr_stack_frame [ 0 ]
  curr_stack_frame' :: call_stack' = call_stack
  curr_stack_frame'' = ( curr_stack_frame' ) ++ ( [ G scope ] )
  ----------------------------------- :: ret
  [return v] ( ( curr_stack_frame , call_stack ) , Running ) -> [empty_stmt] ( ( curr_stack_frame'' , call_stack' ) , Return v )

%%%%%%%%%%%%%%
%Assignment

  %Assign a constant to a variable
  find_index_max ( curr_stack_frame , x ) = i
  scope = curr_stack_frame [ i ]
  curr_stack_frame' = update ( scope + [ x |-> v ] , i , curr_stack_frame )
  ----------------------------------- :: ass_v
  [assign x v] ( ( curr_stack_frame , call_stack ) , Running ) -> [empty_stmt] ( ( curr_stack_frame' , call_stack ) , Running )

  %Assign to a struct field
  struct { f1 = v1 ; ... ; fn = vn } = lookup_lval ( curr_stack_frame , lval )
  v'' = ( struct { f1 = v1 ; ... ; fn = vn } with f := v )
  ----------------------------------- :: ass_s
  [assign ( lval . f ) v] ( ( curr_stack_frame , call_stack ) , Running ) -> [assign lval  v''] ( ( curr_stack_frame , call_stack ) , Running )

  %Assign to a header field
  header boolv { f1 = v1 ; ... ; fn = vn } = lookup_lval ( curr_stack_frame , lval )
  v'' = ( header boolv { f1 = v1 ; ... ; fn = vn } with f := v )
  ----------------------------------- :: ass_h
  [assign ( lval . f ) v] ( ( curr_stack_frame , call_stack ) , Running ) -> [assign lval  v''] ( ( curr_stack_frame , call_stack ) , Running )

%%%%%%%%%%%%%%
%Sequence

  [stmt1] ( stacks , Running ) -> [stmt1'] ( stacks' , Running )
  ----------------------------------- :: seq1
  [stmt1 ; stmt2] ( stacks , Running ) -> [stmt1' ; stmt2] ( stacks' , Running )

  ----------------------------------- :: seq2
  [empty_stmt ; stmt] ( stacks , Running ) -> [stmt] ( stacks , Running )

  [stmt1] ( stacks , Running ) -> [stmt1'] ( stacks' , Return v )
  ----------------------------------- :: seq3
  [stmt1 ; stmt2] ( stacks , Running ) -> [ empty_stmt ] ( stacks' , Return v )

%%%%%%%%%%%%%%
%Conditional

  ----------------------------------- :: cond2
  [if true then stmt1 else stmt2] ( stacks , Running ) -> [stmt1] ( stacks , Running )

  ----------------------------------- :: cond3
  [if false then stmt1 else stmt2] ( stacks , Running ) -> [stmt2] ( stacks , Running )

%%%%%%%%%%%%%%
%Declaration

  length ( curr_stack_frame ) = i
  scope = curr_stack_frame [ i ]
  curr_stack_frame' = update ( scope + [ x |-> uninit ] , i , curr_stack_frame )
  ----------------------------------- :: decl
  [decl x t] ( ( curr_stack_frame , call_stack ) , Running ) -> [empty_stmt] ( ( curr_stack_frame' , call_stack ) , Running )


%%%%%%%%%%%%%%
%Block

  curr_stack_frame' = emptyscope :: curr_stack_frame
  ----------------------------------- :: block_enter
  [begin stmt end] ( ( curr_stack_frame , call_stack ) , Running ) -> [begin' stmt end'] ( ( curr_stack_frame' , call_stack ) , Running )

  [stmt] ( stacks , Running ) -> [stmt'] ( stacks' , Running )
  ----------------------------------- :: block_exec
  [begin' stmt end'] ( stacks , Running ) -> [begin' stmt' end'] ( stacks' , Running )

  curr_stack_frame' = tl curr_stack_frame
  ----------------------------------- :: block_exit
  [begin' empty_stmt end'] ( ( curr_stack_frame , call_stack ) , Running ) -> [empty_stmt] ( ( curr_stack_frame' , call_stack ) , Running )

%%%%%%%%%%%%%%
%Verify

%Case predicate holds
  ------------------------------------------------- :: verify_3
  [verify true ( errmsg x )]( stacks , Running ) -> [empty_stmt]( stacks' , Running )

%Case predicate does not hold
  %TODO: This assumption needed since we don't have string literals yet
  x' = ParserError
  x'' = "reject"
  ------------------------------------------------- :: verify_4
  [verify false ( errmsg x )]( stacks , Running ) -> [ assign x' ( errmsg x ) ; transition x'' ]( stacks' , Running )

%%%%%%%%%%%%%%
%Transition

  not_final_state ( x )
  ------------------------------------------------- :: trans_1
  [transition x]( stacks , Running ) -> [empty_stmt]( stacks , Trans x )

  x = "accept"
  ------------------------------------------------- :: trans_2
  [transition x]( stacks , Running ) -> [empty_stmt]( stacks , Accept )

  x = "reject"
  ------------------------------------------------- :: trans_3
  [transition x]( stacks , Running ) -> [empty_stmt]( stacks , Reject )

%Transition to named state
%NOTE: This assumes transition is last statement
%TODO: Requires statement to be found in pars_map
%  ------------------------------------------------- :: transition_1
%  [transition x]( stacks , Running ) -> [empty_stmt]( stacks , Trans x )

%Transition to accept
%NOTE: This assumes transition is last statement
%  ------------------------------------------------- :: transition_2
%  [transition accept]( stacks , Running ) -> [empty_stmt]( stacks , Accept )

%Transition to reject
%NOTE: This assumes transition is last statement
%  ------------------------------------------------- :: transition_3
%  [transition reject x]( stacks , Running ) -> [empty_stmt]( stacks , Reject x )


%%%%%%%%%%%%%%
%Exit

  %TODO: exit semantics might require to have a specific "function-in-progress" statement
  %      in order to know what to reduce to nothing.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Reduction of expression rules %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Reduction step of return expression
  [e] ( stacks , Running ) ~> [e'] ( stacks' , Running )
  ----------------------------------- :: ret_e
  [return e] ( stacks , Running ) -> [return e'] ( stacks' , Running )

%Reduction step of assign expression
  [e] ( stacks , Running ) ~> [e'] ( stacks' , Running )
  ----------------------------------- :: ass_e
  [assign x e] ( stacks , Running ) -> [assign x e'] ( stacks' , Running )

%Reduction step of condition
  [e] ( stacks , Running ) ~> [e'] ( stacks' , Running )
  ----------------------------------- :: cond_e
  [if e then stmt1 else stmt2] ( stacks , Running ) -> [if e' then stmt1 else stmt2] ( stacks' , Running )

%Reduction step of verify predicate
  [e] ( stacks , Running ) ~> [e''] ( stacks' , Running )
  ------------------------------------------------- :: verify_e1
  [verify e e' ]( stacks , Running ) -> [verify e'' e']( stacks' , Running )

%Reduction step of error message
  [e] ( stacks , Running ) ~> [e'] ( stacks' , Running )
  ------------------------------------------------- :: verify_e2
  [verify b e]( stacks , Running ) -> [verify b e']( stacks' , Running )

%Reduction step of transition
  [e] ( stacks , Running ) ~> [e'] ( stacks' , Running )
  ------------------------------------------------- :: trans_e
  [transition e]( stacks , Running ) -> [transition e']( stacks' , Running )


%%%%%%%%%%%%%%%%%%%%
% Parser semantics %
%%%%%%%%%%%%%%%%%%%%
%This isolates the unstructured parser semantics into a set of rules defined in terms
%of the regular statement semantics.

defns
  pars_sem :: '' ::=
defn
  [ stmt ] state --> [ stmt' ] state' :: :: pars_red :: pars_
  {{ com parser semantics }}
by

  [stmt]( stacks , Running ) -> [stmt']( stacks' , Running )
  ------------------------------------------------- :: stmt
  [stmt]( stacks , Running ) --> [stmt']( stacks' , Running )

  [stmt]( stacks , Running ) -> [stmt']( stacks' , Trans x )
  stmt'' = pars_map ( x )
  ------------------------------------------------- :: state
  [stmt]( stacks , Running ) --> [stmt'']( stacks' , Running )

%If the end of some parser state is reached without status change, we reject
  [stmt]( stacks , Running ) -> [empty_stmt]( stacks' , Running )
  x = "reject"
  ------------------------------------------------- :: empty
  [stmt]( stacks , Running ) --> [transition x]( stacks' , Running )

defns
  pars_t_sem :: '' ::=
defn
  [ stmt ] state --> state' :: :: pars_t_red :: pars_t_
  {{ com parser semantics, final step }}
by

  [stmt]( stacks , Running ) -> [stmt']( stacks , pars_fin )
  ------------------------------------------------- :: fin
  [stmt]( stacks , Running ) --> ( stacks , pars_fin )