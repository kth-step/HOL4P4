embed
{{ hol
open wordsTheory;
}}
%x denotes variable name, f denotes field name
metavar x, f ::=
      {{ lex alphanum }}
      {{ hol string }}
      {{ tex [[x]] }}
      {{ com string }}
metavar num ::=
      {{ lex numeral }}
      {{ hol num }}
      {{ com natural number }}
%TODO Numeral or alphanum?
metavar b ::=
      {{ lex numeral }}
      {{ hol bool }}
      {{ tex [[b]] }}
      {{ com boolean }}
%TODO Ideally, one should have different word lengths
metavar n ::=
      {{ lex numeral }}
      {{ hol word64 }}
%TODO Causes problems with double subscript in LaTeX...
%      {{ tex [[n]]_{64} }}
      {{ tex [[n]] }}
      {{ com integer }}
indexvar i, j, k, l ::=
  {{ lex numeral }}
  {{ coq nat }}
  {{ hol num }}
  {{ com indices }}
grammar

%Statement semantics
%TODO: Add directed arguments (in, out, inout)

%%%%%%%%%%%%%%%
% Expressions %
%%%%%%%%%%%%%%%

%Unary operations
unop {{ tex \ominus }}:: unop_ ::=
| ! :: :: neg_bool
  {{ com boolean negation }}
  {{ tex ! }}
| ~ :: :: compl
  {{ com bitwise complement }}
  {{ tex \neg }}
| - :: :: neg_signed
  {{ com signed negation }}
| + :: :: un_plus
  %Defined as no-op for all values?
  {{ com unary plus }}

%Binary operations
%TODO: Saturating addition?
%TODO: Saturating subtraction?
binop {{ tex \oplus }} :: binop_ ::=
| * :: :: mul
  {{ com multiplication }}
  {{ tex \times }}
| / :: :: div
  {{ com division }}
| mod :: :: mod
  {{ com modulo }}
  {{ tex \bmod }}
  %Denoted by % in P4 specification
| + :: :: add
  {{ com addition }}
| - :: :: sub
  {{ com subtraction }}
| SHL :: :: shl
  {{ com left-shift }}
  {{ tex \ll }}
| SHR :: :: shr
  {{ com right-shift }}
  {{ tex \gg }}
| LE :: :: le
  {{ com less or equal }}
  {{ tex \leq }}
| GE :: :: ge
  {{ com greater or equal }}
  {{ tex \geq }}
| < :: :: ls
  {{ com less }}
  {{ tex < }}
| > :: :: gt
  {{ com greater }}
  {{ tex > }}
| NE :: :: neq
  {{ com not equal }}
  {{ tex \neq }}
| EQ :: :: eq
  {{ com equal }}
  {{ tex = }}
| & :: :: and
  {{ com bitwise and }}
| ^ :: :: xor
  {{ com bitwise xor }}
  {{ tex \underline{\vee} }}
| '|' :: :: or
  {{ com bitwise or }}
  {{ tex \mid }}
| AND :: :: bin_and
  {{ com binary and }}
  {{ tex \land }}
| OR :: :: bin_or
  {{ com binary or }}
  {{ tex \lor }}

bool :: bool_ ::=
{{ com boolean }}
| b :: :: free
%  {{ hol [[b]] }}
| true :: :: true
  {{ hol T }}
| false :: :: false
  {{ hol F }}

%TODO: String literal
%TODO: L-values and identifiers
%TODO: Enums
%Constants should be thought of as "values of variables we look up"
const :: const_ ::=
{{ com constant }}
| bool :: :: bool
  {{ com boolean value }}
| n :: :: int
  {{ com integer }}
| struct { x1 = const1 ; ... ; xi = consti } :: :: struct
  {{ com struct }}
  {{ tex struct }} %TODO
| header { x1 = const1 ; ... ; xi = consti } :: :: header
  % A header is like a struct, but has different well-formedness conditions
  {{ com header }}
  {{ tex header }} %TODO
%%TODO: An extern should contain an internally visible list of mappings between variable names and constants,
%%      and a map from function names to their bodies and arguments
%% See https://github.com/p4lang/p4c/blob/main/p4include/core.p4 , e.g. packet_in definition
| errmsg x :: :: err
  {{ com error message }}

%TODO: Array element
%TODO: Bitslice
lval :: lval_ ::=
| x :: :: varname
  {{ com variable name }}
| lval . f :: :: field
  {{ com field access }}

%TODO: Casts
%TODO: Lists
%TODO: Tuples
%TODO: Conditional operator
exp :: exp_ ::=
{{ com expression }}
| const :: :: const
  {{ com const }}
| x :: :: var
  {{ com variable/function name }}
| exp . exp' :: :: acc
  {{ com field/method access }}
| unop exp :: :: unop
  {{ com unary operation }}
  {{ tex [[unop]] [[exp]] }}
| exp1 binop exp2 :: :: binop
  {{ com binary operation }}
  {{ tex [[exp1]] [[binop]] [[exp2]] }}
| call x ( exp1 , .. , expi ) :: :: func_call
  {{ com function call }}
  {{ hol (exp_func_call [[x]] [[exp1 .. expi]]) }}
| exec stmt :: :: func_exec
  {{ com function execution }}
| ( exp ) :: S :: paren
  {{ hol ([[exp]]) }}

%TODO: Trying to make a new definition for expression lists (mainly for function
%      arguments) proved problematic.
%      If all productions are meta, then you get args as a type abbreviation of "exp",
%      which is either undefined at the point where the abbreviation is made, or
%      exp_list is unknown when defining exp. Either way, mutually recursive definitions
%      are not possible. If nothing is meta and exp_list is not exported to a type
%      abbreviation, the function call semantics will not understand the "exp_list" and "exp list" correspondence.
exp_list :: exp_list_ ::=
{{ com list of expressions }}
{{ hol (exp list) }}
| empty_el :: M :: empty
  {{ com empty expression list }}
  {{ hol ([]:exp list) }}
| exp1 , .. , expi :: M :: exps
  {{ com list of expressions }}
  {{ hol ([[exp1 .. expi]]) }}
| exp_list ++ exp_list' :: M :: append
  {{ com append two exp_lists }}
  {{ hol ([[exp_list]] ++ [[exp_list']]) }}
| update ( exp , num , exp_list ) :: M :: update
  {{ com update entry of expression list }}
  {{ hol (LUPDATE [[exp]] [[num]] [[exp_list]]) }}
  {{ tex ([[num]] \mapsto  [[exp]]) [[exp_list]] }}
| ( exp_list ) :: S :: paren
  {{ hol ([[exp_list]]) }}


%%%%%%%%%%%%%%
% Statements %
%%%%%%%%%%%%%%

decl :: decl_ ::=
{{ com declaration }}
| empty_decl :: :: empty
  {{ com empty declaration }}
| declare x exp :: :: stmt
  {{ com declaration }}
  {{ tex [[x]] \mathrel{\mathop:}:= [[exp]] }}
| decl1 ; decl2 :: :: seq
  {{ com sequence }}

pars_fin {{ tex p_{ \mathrm{fin} } }} :: pars_fin ::=
{{ com final parser states }}
| Accept :: :: accept
  {{ com accepted state }}
| Reject x :: :: reject
  {{ com rejected state }}

pars_next {{ tex p }} :: pars_next_ ::=
{{ com parser next state }}
| Trans x :: :: trans
  {{ com transition to named state }}
| pars_fin :: :: pars_fin
  {{ com final state }}

%TODO: Switch statement
stmt :: stmt_ ::=
{{ com statement }}
| empty_stmt :: :: empty
  {{ com empty statement }}
  {{ tex \emptyset_{ \mathrm{stmt} } }}
| assign x exp :: :: ass
  {{ com assignment }}
  {{ tex [[x]] \mathrel{\mathop:}= [[exp]] }}
| if exp then stmt1 else stmt2 :: :: cond
  {{ com conditional }}
| begin decl stmt end :: :: block 
  {{ com block }}
  {{ tex \{ [[decl]] \,\, [[stmt]] \} }}
| begin' decl stmt end' :: :: block_ip
  {{ com block in progress }}
  {{ tex [ [[decl]] \,\, [[stmt]] ] }}
| return exp :: :: ret
  {{ com return }}
| stmt1 ; stmt2 :: :: seq
  {{ com sequence }}
| verify exp exp' :: :: verify
  % exp is predicate, exp' is error message
  {{ com verify }}
| transition pars_next :: :: trans
  % x is the parser state name
  {{ com transition }}
  {{ tex transition [[pars_next]] }}

func_map {{ tex F }} :: func_map_ ::=
{{ com function map  }}
{{ hol (string |-> (stmt # (string list))) }}
| empty :: M :: empty
  {{ com empty function map }}
  {{ hol FEMPTY }}
| func_map + [ x |-> stmt ] :: M :: update
  {{ com update variable mapping }}
  {{ hol (FUPDATE [[func_map]] ([[x]], [[stmt]])) }}

% TODO: Could be just an abbreviation, since it's never changed...
pars_map {{ tex P }} :: pars_map_ ::=
{{ com parser state map  }}
{{ hol (string |-> stmt) }}
| empty :: M :: empty
  {{ com empty parser state map }}
  {{ hol FEMPTY }}

%%%%%%%%%%%%%%%%%%%
% Execution state %
%%%%%%%%%%%%%%%%%%%
%Note that this is not part of the P4 specification, but made up for verification purposes.

%Execution status.
status :: status_ ::=
 {{ com execution status }}
| Running :: :: running
  {{ tex { \mathbf{R} } }}
| Return const :: :: return
  {{ tex { \mathbf{Ret} \,\, [[const]]} }}
| pars_next :: :: pars_next
| TypeError :: :: type_error
  {{ tex { \bot } }}

scope :: scope_ ::=
{{ hol (string |-> const) }}
{{ com frame/variable environment of current scope }}
| emptyscope :: M :: empty
  {{ com empty stack frame }}
  {{ hol FEMPTY }}
  {{ tex {\emptyset}_{ \mathrm{scope} } }}
| scope + [ x |-> const ] :: M :: update
  {{ com update variable mapping }}
  {{ hol (FUPDATE [[scope]] ([[x]], [[const]])) }}
  {{ tex ([[x]] \mapsto  [[const]]) [[scope]] }}
| scope ++ [ x1 |-> const1 , .. , xi |-> consti ] :: M :: update_list
  {{ com update variable mapping }}
  {{ hol (FUPDATE_LIST [[scope]] [[x1 const1 .. xi consti]]) }}
  {{ tex \forall i . (x_i \mapsto  \mathit{const}_i) [[scope]] }}
| ( scope ) :: S :: paren
  {{ hol ([[scope]]) }}

%Fence so that ott does not re-order curr_stack_frame
embed
{{ hol

}}
grammar

curr_stack_frame {{ tex \varepsilon }} :: curr_stack_frame_ ::=
{{ hol (scope list) }}
{{ com current stack frame - stack of block scopes }}
| emptycsf :: M :: empty
  {{ hol ([]:scope list) }}
  {{ tex {\emptyset}_{\varepsilon} }}
| [ scope1 , .. , scopei ] :: M :: list
  {{ hol ([[scope1 .. scopei]]) }}
| tl curr_stack_frame :: M :: tl
  {{ hol (TL [[curr_stack_frame]]) }}
  {{ tex \mathrm{tl} ([[curr_stack_frame]]) }}
| scope '::' curr_stack_frame' :: M :: cons
  {{ hol ([[scope]] :: [[curr_stack_frame']]) }}
  {{ tex [[scope]] \mathrel{\mathop:}: [[curr_stack_frame']] }}
| curr_stack_frame ++ curr_stack_frame' :: M :: append
  {{ hol ([[curr_stack_frame]] ++ [[curr_stack_frame']]) }}
  {{ tex [[curr_stack_frame]] \mathrel{\mathop+}+ [[curr_stack_frame']] }}
| update ( scope , num , curr_stack_frame ) :: M :: update
  {{ hol (LUPDATE [[scope]] [[num]] [[curr_stack_frame]]) }}
  {{ tex ([[num]] \mapsto  [[scope]]) [[curr_stack_frame]] }}
| ( curr_stack_frame ) :: S :: paren
  {{ hol ([[curr_stack_frame]]) }}

%Fence so that ott does not re-order curr_stack_frame
embed
{{ hol

}}
grammar

call_stack {{ tex E }} :: call_stack_ ::=
{{ com stack of caller stack frames }}
{{ hol (curr_stack_frame list) }}
| emptycs :: M :: empty
  {{ hol ([]:curr_stack_frame list) }}
  {{ tex {\emptyset}_{E} }}
| [ curr_stack_frame1 , .. , curr_stack_framei ] :: M :: list
  {{ hol ([[curr_stack_frame1 .. curr_stack_framei]]) }}
| curr_stack_frame '::' call_stack :: M :: cons
  {{ hol ([[curr_stack_frame]] :: [[call_stack]]) }}
  {{ tex [[curr_stack_frame]] \mathrel{\mathop:}: [[call_stack]] }}
| ( call_stack ) :: S :: paren
  {{ hol ([[call_stack]]) }}

stacks {{ tex \sigma }} :: stacks_ ::=
 {{ com stacks in execution state }}
| ( curr_stack_frame , call_stack ) :: :: tup

state {{ tex \Sigma }} :: state_ ::=
 {{ com execution state }}
| ( stacks , status ) :: :: tup


%%%%%%%%%%%%%%%%%%%%%%%%
% Expression semantics %
%%%%%%%%%%%%%%%%%%%%%%%%

terminals :: terminals_ ::=
%Statement reduction
| -> :: :: rightarrow {{ tex \rightarrow }}
%Expression reduction
| ~> :: :: rightsquigarrow {{ tex \rightsquigarrow }}
%Parser state reduction
| --> :: :: longrightarrow {{ tex \longrightarrow }}

formula :: formula_ ::=
{{ com formulas }}
| judgement :: :: judgement
  {{ com judgement }}
%Expressions
| ! b = b' :: M :: neg_bool
  {{ hol (~[[b]] = [[b']]) }}
| ~ n = n' :: M :: compl
  %TODO
  {{ hol (~ [[n]] = [[n']]) }}
| - n = n' :: M :: neg_signed
  %TODO
  {{ hol (~ [[n]] = [[n']]) }}
| + n = n' :: M :: un_plus
  %TODO: Read specification...
  {{ hol ([[n]] = [[n']]) }}
| n * n' = n'' :: M :: mul
  {{ hol (word_mul [[n]] [[n']] = [[n'']]) }}
| n / n' = n'' :: M :: div
  {{ hol (word_div [[n]] [[n']] = [[n'']]) }}
| n mod n' = n'' :: M :: mod
  {{ hol (word_mod [[n]] [[n']] = [[n'']]) }}
| n + n' = n'' :: M :: add
  {{ hol (word_add [[n]] [[n']] = [[n'']]) }}
| n - n' = n'' :: M :: sub
  {{ hol (word_sub [[n]] [[n']] = [[n'']]) }}
%TODO: EQ for const?
| n EQ n' = b :: M :: eq_word
  {{ hol ([[n]] = [[n']] <=> [[b]]) }}
| b EQ b' = b'' :: M :: eq_bool
  {{ hol ([[b]] = [[b']] <=> [[b'']]) }}
| n SHL n' = n'' :: M :: shl
  {{ hol (word_lsl_bv [[n]] [[n']] = [[n'']]) }}
  %TODO: Double-check
| n SHR n' = n'' :: M :: shr
  {{ hol (word_asr_bv [[n]] [[n']] = [[n'']]) }}
  %TODO: Double-check
| n LE n' = b :: M :: le
  {{ hol ([[n]] <= [[n']] <=> [[b]]) }}
| n GE n' = b :: M :: ge
  {{ hol ([[n]] >= [[n']] <=> [[b]]) }}
| n < n' = b :: M :: lt
  {{ hol ([[n]] < [[n']] <=> [[b]]) }}
| n > n' = b :: M :: gt
  {{ hol ([[n]] > [[n']] <=> [[b]]) }}
| n NE n' = b :: M :: neq_word
  {{ hol ([[n]] <> [[n']] <=> [[b]]) }}
| n & n' = n'' :: M :: and_word
  {{ hol (word_and [[n]] [[n']] = [[n'']]) }}
| n ^ n' = n'' :: M :: xor_word
  {{ hol (word_xor [[n]] [[n']] = [[n'']]) }}
  %TODO: LaTeX XOR
| n '|' n' = n'' :: M :: or_word
  {{ hol (word_or [[n]] [[n']] = [[n'']]) }}
| b AND b' = b'' :: M :: and_bool
  {{ hol ([[b]] /\ [[b']] = [[b'']]) }}
| b OR b' = b'' :: M :: or_bool
  {{ hol ([[b]] \/ [[b']] = [[b'']]) }}

%Type-transforming operations
| curr_stack_frame = hd call_stack :: M :: call_stack_hd
  {{ hol ([[curr_stack_frame]] = HD [[call_stack]]) }}
  {{ tex [[curr_stack_frame]] = \mathrm{hd} [[call_stack]] }}
| scope = curr_stack_frame [ num ] :: M :: curr_stack_frame_index
  {{ hol ([[scope]] = EL [[num]] [[curr_stack_frame]]) }}
| ( stmt , x1 , .. , xi ) = func_map ( x ) :: M :: func_lookup
  {{ com function lookup }}
  {{ hol (FLOOKUP [[func_map]] [[x]] = SOME ([[stmt]], [[x1 .. xi]])) }}
| find_index ( curr_stack_frame , x ) = num :: M :: find_index_scope
  {{ com find index of variable's scope }}
  %INDEX_FIND finds the first occurrence, starting from head and going backwards in list
  {{ hol (FST (THE (INDEX_FIND 0 (\sf. IS_SOME (FLOOKUP sf [[x]])) [[curr_stack_frame]])) = [[num]]) }}
  {{ tex [[x]] \in \mathrm{dom}([[curr_stack_frame]][ [[num]] ]) \land \forall j . \,\, j > [[num]] \Rightarrow [[x]] \notin \mathrm{dom}([[curr_stack_frame]][j]) }}
| const = scope ( x ) :: M :: lookup
  {{ com look-up of variable in scope }}
  {{ hol (FLOOKUP [[scope]] [[x]] = SOME [[const]]) }}
| const = struct { x1 = const1 ; ... ; xi = consti } ( x ) :: M :: access
  {{ com access fo field in struct }}
  {{ hol (FIND (\(k, v). k = [[x]]) [[x1 const1 ... xi consti]] = SOME ([[x]], [[const]])) }}
| exp = exp_list [ num ] :: M :: args_index
  {{ hol ([[exp]] = EL [[num]] [[exp_list]]) }}
| exp = hd exp_list :: M :: args_hd
  {{ hol ([[exp]] = HD [[exp_list]]) }}
  {{ tex [[exp]] = \mathrm{hd} \,\, [[exp_list]] }}

%Function argument resolution
%TODO: Replace with expression list
%| const_list ++ exp_list' = exp_list :: M :: func_args_append
%  {{ com pattern match on constant and non-constant function arguments }}
%  {{ hol (([[const_list]] ++ [[exp_list']]) = [[exp_list]]) }}

%Conditions
%TODO: Remove, with new separate "bool" definition?
| b = true :: M :: is_true
  {{ com condition true }}
  {{ hol ([[b]] = T) }}
  {{ tex [[b]] = \mathrm{True} }}
| b = false :: M :: is_false
  {{ com condition false }}
  {{ hol ([[b]] = F) }}
  {{ tex [[b]] = \mathrm{False} }}
| is_empty ( exp_list ) :: M :: args_empty
  {{ com function arguments empty }}
  {{ hol (NULL [[exp_list]]) }}
  {{ tex \mathit{exp}_1 , .. , \mathit{exp}_i = \{ \} }}

%Equalities
| scope = scope' :: M :: scope_eq
  {{ com scope equality }}
  {{ hol ([[scope]] = [[scope']]) }}
| curr_stack_frame = curr_stack_frame' :: M :: curr_stack_frame_eq
  {{ com curr_stack_frame equality }}
  {{ hol ([[curr_stack_frame]] = [[curr_stack_frame']]) }}
| call_stack = call_stack' :: M :: call_stack_eq
  {{ com call_stack equality }}
  {{ hol ([[call_stack]] = [[call_stack']]) }}
%TODO: This can cause confusion with the judgements with binary expression equalities, hence the '...
| exp_list =' exp_list' :: M :: args_eq
  {{ com args equality }}
  {{ hol ([[exp_list]] = [[exp_list']]) }}
  {{ tex [[exp_list]] = [[exp_list']] }}

%MISC (TODO)
%TODO: Equalities and inequalities on numerals
| num' = num + 1 :: M :: num_inc
  {{ com numeral increment }}
  {{ hol ([[num']] = [[num]] + 1) }}
  {{ tex [[num']] = [[num]] + 1 }}
| num = length ( exp_list ) :: M :: num_len
  {{ com length of list }}
  {{ hol ([[num]] = LENGTH [[exp_list]]) }}
  {{ tex [[num]] = \mathrm{len} \,\, [[exp_list]] }}
| num < length ( exp_list ) :: M :: num_in_rg
  {{ com numeral in range }}
  {{ hol ([[num]] < LENGTH [[exp_list]]) }}
  {{ tex [[num]] < \mathrm{len}(\mathit{exp}) }}
| is_consts ( exp_list ) :: M :: args_const
  {{ com function arguments constant }}
  {{ hol (is_consts [[exp_list]]) }}
  %TODO: Fix typesetting
  {{ tex \mathrm{is\_consts} \,\, [[exp_list]] }}
| stmt = pars_map ( x ) :: M :: pars_lookup
  {{ com parser state map lookup }}
  {{ hol (FLOOKUP [[pars_map]] [[x]] = SOME ([[stmt]])) }}
| x = empty_err_msg :: M :: empty_err_msg
  {{ com empty error message }}
  {{ hol ([[x]] = "ParserStateEnd") }}
  {{ tex [[x]] = \mathrm{ParserStateEnd} }}

%TODO: Review if this is needed...
embed
{{ hol
val is_const_def = Define `
    ( is_const (exp_const _) = T)
/\  ( is_const _ = F)
`;
val is_consts_def = Define `
    (is_consts exp_list = ~(EXISTS (\el. ~(is_const el)) exp_list))
`;
}}
grammar

defns
  exp_sem :: '' ::=
defn
  [ exp ] ( stacks , status ) ~> [ exp' ] ( stacks' , status' ) :: :: exp_red :: exp_
  {{ com expression semantics }}
  %Uses different export homs for LaTeX and HOL4 so that LaTeX hides unnecessary status
  {{ tex [ [[exp]] ] [[stacks]] \rightsquigarrow [ [[exp']] ] [[stacks']] }}
by

%%%%%%%%%%%%%%
%Function call + exec (in expression)

  %Resolving arguments to function call - assigning arguments to new stack frame
  ( stmt , x1 , .. , xi ) = func_map ( x )
  scope' = emptyscope ++ [ x1 |->  const1 , .. , xi |-> consti ]
  scope = curr_stack_frame[0]
  curr_stack_frame' = scope' :: [scope]
  call_stack' = tl curr_stack_frame :: call_stack
  ----------------------------------- :: func_call_newframe
  [call x ( const1 , .. , consti )] ( ( curr_stack_frame , call_stack ) , Running ) ~> [ exec stmt ] ( ( curr_stack_frame' , call_stack' ) , Running )

  [stmt] ( stacks , Running ) -> [stmt'] ( stacks' , Running )
  ----------------------------------- :: func_exec
  [exec stmt] ( stacks , Running ) ~> [exec stmt'] ( stacks' , Running )

%TODO: Note that this is a simplification of the return mechanism
  ----------------------------------- :: func_ret_exp
  [exec empty_stmt] ( stacks , Return const ) ~> [const] ( stacks' , Running )

%%%%%%%%%%%%%%%%%
%Variable look-up

  find_index ( curr_stack_frame, x ) = num
  scope = curr_stack_frame [ num ]
  const = scope ( x )
  ----------------------------------- :: lookup
  [x] ( ( curr_stack_frame, call_stack ) , Running ) ~> [const] ( ( curr_stack_frame, call_stack ) , Running )

%%%%%%%%%%%%%%%%%%%%
%Struct/extern field/method access
%TODO: Nested structs

  const = struct { x1 = const1 ; ... ; xi = consti } ( x )
  ----------------------------------- :: acc
  [ struct { x1 = const1 ; ... ; xi = consti } . x] ( stacks , Running ) ~> [const] ( stacks' , Running )

%%%%%%%%%%%%%
%"Reduction of argument" rules

%Resolving arguments to function call - reduction
  %TODO: force exp_list'' to be non-empty?
  exp_list' ++ exp_list'' =' exp1 , .. , expi
  is_consts ( exp_list' )
  exp = hd exp_list''
  [ exp ] ( stacks , Running ) ~> [ exp' ] ( stacks' , Running )
  %TODO: length plus 1 if indexing from 1
  num = length ( exp_list' )
  exp'1 , .. , exp'j =' update ( exp' , num , ( exp1 , .. , expi ) )
  ----------------------------------- :: func_call_args
  [call x ( exp1 , .. , expi )] ( stacks , Running ) ~> [call x ( exp'1 , .. , exp'j )] ( stacks , Running )

%Stacks
  [exp'] ( stacks , Running ) ~> [exp''] ( stacks' , Running )
  ----------------------------------- :: acc_arg2
  [exp . exp'] ( stacks , Running ) ~> [exp . exp''] ( stacks' , Running )

  [exp] ( stacks , Running ) ~> [exp'] ( stacks' , Running )
  ----------------------------------- :: acc_arg1
  [exp . x] ( stacks , Running ) ~> [exp' . x] ( stacks' , Running )

%Unary operations
  [exp] ( stacks , Running ) ~> [exp'] ( stacks' , Running )
  ----------------------------------- :: unop_arg
  [unop exp] ( stacks , Running ) ~> [unop exp'] ( stacks' , Running )

%Binary operations
  [exp] ( stacks , Running ) ~> [exp''] ( stacks' , Running )
  ----------------------------------- :: binop_arg1
  [exp binop exp'] ( stacks , Running ) ~> [exp'' binop exp'] ( stacks' , Running )

  [exp'] ( stacks , Running ) ~> [exp''] ( stacks' , Running )
  ----------------------------------- :: binop_arg2
  [const binop exp'] ( stacks , Running ) ~> [exp binop exp''] ( stacks' , Running )


%%%%%%%%%%%%%%%%%%%
%Unary expressions%
%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%
%Boolean negation

  ! b = b'
  ----------------------------------- :: neg_bool
  [! b] ( stacks , Running ) ~> [b'] ( stacks , Running )

%%%%%%%%%%%%%%%%%%%
%Bitwise complement

  ~ n = n'
  ----------------------------------- :: compl
  [~ n] ( stacks , Running ) ~> [n'] ( stacks , Running )

%%%%%%%%%%%%%%%%
%Signed negation

  - n = n'
  ----------------------------------- :: neg_signed
  [- n] ( stacks , Running ) ~> [n'] ( stacks , Running )

%%%%%%%%%%%
%Unary plus

  + n = n'
  ----------------------------------- :: un_plus
  [+ n] ( stacks , Running ) ~> [n'] ( stacks , Running )


%%%%%%%%%%%%%%%%%%%%
%Binary expressions%
%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%
%Multiplication

  n * n' = n''
  ----------------------------------- :: mul
  [n * n'] ( stacks , Running ) ~> [n''] ( stacks , Running )

%%%%%%%%%%%%%%%
%Division

  n / n' = n''
  ----------------------------------- :: div
  [n / n'] ( stacks , Running ) ~> [n''] ( stacks , Running )

%%%%%%%%%%%%%%%
%Modulo

  n mod n' = n''
  ----------------------------------- :: mod
  [n mod n'] ( stacks , Running ) ~> [n''] ( stacks , Running )

%%%%%%%%%%%%
%Addition

  n + n' = n''
  ----------------------------------- :: add
  [n + n'] ( stacks , Running ) ~> [n''] ( stacks , Running )

%%%%%%%%%%%%
%Subtraction

  n - n' = n''
  ----------------------------------- :: sub
  [n - n'] ( stacks , Running ) ~> [n''] ( stacks , Running )

%%%%%%%%%%%%
%Left shift

  n SHL n' = n''
  ----------------------------------- :: shl
  [n SHL n'] ( stacks , Running ) ~> [n''] ( stacks , Running )

%%%%%%%%%%%%
%Right shift

  n SHR n' = n''
  ----------------------------------- :: shr
  [n SHR n'] ( stacks , Running ) ~> [n''] ( stacks , Running )

%%%%%%%%%%%%%%%%%%%
%Less than or equal

  n LE n' = b
  ----------------------------------- :: le
  [n LE n'] ( stacks , Running ) ~> [b] ( stacks , Running )

%%%%%%%%%%%%%%%%%%%%%%
%Greater than or equal

  n GE n' = b
  ----------------------------------- :: ge
  [n GE n'] ( stacks , Running ) ~> [b] ( stacks , Running )

%%%%%%%%%%
%Less than

  n < n' = b
  ----------------------------------- :: lt
  [n < n'] ( stacks , Running ) ~> [b] ( stacks , Running )

%%%%%%%%%%%%%
%Greater than

  n > n' = b
  ----------------------------------- :: gt
  [n > n'] ( stacks , Running ) ~> [b] ( stacks , Running )

%%%%%%%%%%%%%
%Not equal

  n NE n' = b
  ----------------------------------- :: neq
  [n NE n'] ( stacks , Running ) ~> [b] ( stacks , Running )

%%%%%%%%%%%%%
%Equal

  n EQ n' = b
  ----------------------------------- :: eq
  [n EQ n'] ( stacks , Running ) ~> [b] ( stacks , Running )

%%%%%%%%%%%%%
%Bitwise and

  n & n' = n''
  ----------------------------------- :: and
  [n & n'] ( stacks , Running ) ~> [n''] ( stacks , Running )

%%%%%%%%%%%%%
%Bitwise xor

  n ^ n' = n''
  ----------------------------------- :: xor
  [n ^ n'] ( stacks , Running ) ~> [n''] ( stacks , Running )

%%%%%%%%%%%%%
%Bitwise or

  n | n' = n''
  ----------------------------------- :: or
  [n | n'] ( stacks , Running ) ~> [n''] ( stacks , Running )

%%%%%%%%%%%%%
%Binary and

  b AND b' = b''
  ----------------------------------- :: bin_and
  [b AND b'] ( stacks , Running ) ~> [b''] ( stacks , Running )

%%%%%%%%%%%%%
%Binary or

  b OR b' = b''
  ----------------------------------- :: bin_or
  [b OR b'] ( stacks , Running ) ~> [b''] ( stacks , Running )


%%%%%%%%%%%%%%%%%%%%%%%%%
% Declaration semantics %
%%%%%%%%%%%%%%%%%%%%%%%%%

defns
  decl_sem :: '' ::=
defn
  [ decl ] state -> [ decl' ] state' :: :: decl_red :: decl_
  {{ com declaration semantics }}
by

  %Declare a variable and assign a value - reduction step
  [exp] ( stacks , Running ) ~> [exp'] ( stacks' , Running )
  ----------------------------------- :: decl_exp
  [declare x exp] ( stacks , Running ) -> [declare x exp'] ( stacks' , Running )

  scope :: curr_stack_frame' = curr_stack_frame
  scope' = scope + [ x |-> n ]
  curr_stack_frame'' = scope' :: curr_stack_frame'
  ----------------------------------- :: decl_const
  [declare x n] ( ( curr_stack_frame , call_stack ) , Running ) -> [empty_decl] ( ( curr_stack_frame'' , call_stack ) , Running )

  [decl1] ( stacks , Running ) -> [decl1'] ( stacks' , Running )
  ----------------------------------- :: seq1
  [decl1 ; decl2] ( stacks , Running ) -> [decl1' ; decl2] ( stacks' , Running )

  ----------------------------------- :: seq2
  [empty_decl ; decl] ( stacks , Running ) -> [decl] ( stacks , Running )


%%%%%%%%%%%%%%%%%%%%%%%
% Statement semantics %
%%%%%%%%%%%%%%%%%%%%%%%

%TODO: Block
%TODO: Exit
%TODO: Switch

defns
  stmt_sem :: '' ::=
defn
  [ stmt ] state -> [ stmt' ] state' :: :: stmt_red :: stmt_
  {{ com statement semantics }}
by

%%%%%%%%%%%%%%
%Return

  %Return
  scope = curr_stack_frame [ 0 ]
  curr_stack_frame' :: call_stack' = call_stack
  curr_stack_frame'' = ( curr_stack_frame' ) ++ ( [ scope ] )
  ----------------------------------- :: ret
  [return const] ( ( curr_stack_frame , call_stack ) , Running ) -> [empty_stmt] ( ( curr_stack_frame'' , call_stack' ) , Return const )

%%%%%%%%%%%%%%
%Assignment

  %Assign to a variable
  find_index ( curr_stack_frame , x ) = num
  scope = curr_stack_frame [ num ]
  scope' = scope + [ x |-> const ]
  curr_stack_frame' = update ( scope' , num , curr_stack_frame )
  ----------------------------------- :: ass_var
  [assign x const] ( ( curr_stack_frame , call_stack ) , Running ) -> [empty_stmt] ( ( curr_stack_frame' , call_stack ) , Running )

  %TODO: Assign to a struct field

%%%%%%%%%%%%%%
%Sequence

  [stmt1] ( stacks , Running ) -> [stmt1'] ( stacks' , Running )
  ----------------------------------- :: seq1
  [stmt1 ; stmt2] ( stacks , Running ) -> [stmt1' ; stmt2] ( stacks' , Running )

  ----------------------------------- :: seq2
  [empty_stmt ; stmt] ( stacks , Running ) -> [stmt] ( stacks , Running )

  [stmt1] ( stacks , Running ) -> [stmt1'] ( stacks' , Return const )
  ----------------------------------- :: seq3
  [stmt1 ; stmt2] ( stacks , Running ) -> [ empty_stmt ] ( stacks' , Return const )

%%%%%%%%%%%%%%
%Conditional

%  b = true
  ----------------------------------- :: cond2
  [if true then stmt1 else stmt2] ( stacks , Running ) -> [stmt1] ( stacks , Running )

%  b = false
  ----------------------------------- :: cond3
  [if false then stmt1 else stmt2] ( stacks , Running ) -> [stmt2] ( stacks , Running )

%%%%%%%%%%%%%%
%Block

  curr_stack_frame' = emptyscope :: curr_stack_frame
  ----------------------------------- :: block_enter
  [begin decl stmt end] ( ( curr_stack_frame , call_stack ) , Running ) -> [begin' decl stmt end'] ( ( curr_stack_frame' , call_stack ) , Running )

  [decl] ( stacks , Running ) -> [decl'] ( stacks' , Running )
  ----------------------------------- :: block_declare
  [begin' decl stmt end'] ( stacks , Running ) -> [begin' decl' stmt end'] ( stacks' , Running )

  [stmt] ( stacks , Running ) -> [stmt'] ( stacks' , Running )
  ----------------------------------- :: block_stmt
  [begin' empty_decl stmt end'] ( stacks , Running ) -> [begin' empty_decl stmt' end'] ( stacks' , Running )

  curr_stack_frame' = tl curr_stack_frame
  ----------------------------------- :: block_exit
  [begin' empty_decl empty_stmt end'] ( ( curr_stack_frame , call_stack ) , Running ) -> [empty_stmt] ( ( curr_stack_frame' , call_stack ) , Running )

%%%%%%%%%%%%%%
%Verify

%Case predicate holds
%  b = true
  ------------------------------------------------- :: verify_3
  [verify true ( errmsg x )]( stacks , Running ) -> [empty_stmt]( stacks' , Running )

%Case predicate does not hold
%  b = false
  ------------------------------------------------- :: verify_4
  [verify false ( errmsg x )]( stacks , Running ) -> [empty_stmt]( stacks' , Reject x )

%%%%%%%%%%%%%%
%Transition

  ------------------------------------------------- :: transition
  [transition pars_next]( stacks , Running ) -> [empty_stmt]( stacks , pars_next )

%Transition to named state
%NOTE: This assumes transition is last statement
%TODO: Requires statement to be found in pars_map
%  ------------------------------------------------- :: transition_1
%  [transition x]( stacks , Running ) -> [empty_stmt]( stacks , Trans x )

%Transition to accept
%NOTE: This assumes transition is last statement
%  ------------------------------------------------- :: transition_2
%  [transition accept]( stacks , Running ) -> [empty_stmt]( stacks , Accept )

%Transition to reject
%NOTE: This assumes transition is last statement
%  ------------------------------------------------- :: transition_3
%  [transition reject x]( stacks , Running ) -> [empty_stmt]( stacks , Reject x )


%%%%%%%%%%%%%%
%Exit

  %TODO: exit semantics might require to have a specific "function-in-progress" statement
  %      in order to know what to reduce to nothing.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Reduction of expression rules %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Reduction step of return expression
  [exp] ( stacks , Running ) ~> [exp'] ( stacks' , Running )
  ----------------------------------- :: ret_exp
  [return exp] ( stacks , Running ) -> [return exp'] ( stacks' , Running )

%Reduction step of assign expression
  [exp] ( stacks , Running ) ~> [exp'] ( stacks' , Running )
  ----------------------------------- :: ass_exp
  [assign x exp] ( stacks , Running ) -> [assign x exp'] ( stacks' , Running )

%Reduction step of condition
  [exp] ( stacks , Running ) ~> [exp'] ( stacks' , Running )
  ----------------------------------- :: cond_exp
  [if exp then stmt1 else stmt2] ( stacks , Running ) -> [if exp' then stmt1 else stmt2] ( stacks' , Running )

%Reduction step of verify predicate
  [exp] ( stacks , Running ) ~> [exp''] ( stacks' , Running )
  ------------------------------------------------- :: verify_exp1
  [verify exp exp' ]( stacks , Running ) -> [verify exp'' exp']( stacks' , Running )

%Reduction step of error message
  [exp] ( stacks , Running ) ~> [exp'] ( stacks' , Running )
  ------------------------------------------------- :: verify_exp2
  [verify b exp]( stacks , Running ) -> [verify b exp']( stacks' , Running )


%%%%%%%%%%%%%%%%%%%%
% Parser semantics %
%%%%%%%%%%%%%%%%%%%%
%This isolates the unstructured parser semantics into a set of rules defined in terms
%of the regular statement semantics.

defns
  pars_sem :: '' ::=
defn
  [ stmt ] state --> [ stmt' ] state' :: :: pars_red :: pars_
  {{ com parser semantics }}
by

  [stmt]( stacks , Running ) -> [stmt']( stacks' , Running )
  ------------------------------------------------- :: stmt
  [stmt]( stacks , Running ) --> [stmt']( stacks' , Running )

  [stmt]( stacks , Running ) -> [stmt']( stacks' , Trans x )
  stmt'' = pars_map ( x )
  ------------------------------------------------- :: state
  [stmt]( stacks , Running ) --> [stmt'']( stacks' , Running )


defns
  pars_t_sem :: '' ::=
defn
  [ stmt ] state --> state' :: :: pars_t_red :: pars_t_
  {{ com parser semantics, final step }}
by

  [stmt]( stacks , Running ) -> [stmt']( stacks , pars_fin )
  ------------------------------------------------- :: fin
  [stmt]( stacks , Running ) --> ( stacks , pars_fin )

%If the end of some parser state is reached without status change, we reject
  [stmt]( stacks , Running ) -> [empty_stmt]( stacks' , Running )
  x = empty_err_msg
  ------------------------------------------------- :: empty
  [stmt]( stacks , Running ) --> ( stacks' , Reject x )